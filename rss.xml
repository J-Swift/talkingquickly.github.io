<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
<generator uri="http://jekyllrb.com" version="3.7.2">Jekyll</generator>
<link href="https://www.talkingquickly.co.uk/rss.xml" rel="self" type="application/atom+xml" />
<link href="https://www.talkingquickly.co.uk/" rel="alternate" type="text/html" />
<updated>2021-04-06T07:45:21+00:00</updated>
<id>https://www.talkingquickly.co.uk/</id>
<title>talkingquickly</title>
<subtitle>kubernetes, rails, stress free deployment and small steps taken quickly</subtitle>
<author>
<name>Ben Dixon</name>
</author>
<entry>
<title>Deploying Rails to a VPS with Capistrano V3</title>
<link href="https://www.talkingquickly.co.uk/deploying-rails-to-a-vps-with-capistrano-v3-and-systemd" rel="alternate" type="text/html" title="Deploying Rails to a VPS with Capistrano V3" />
<published>2021-04-04T15:40:00+00:00</published>
<updated>2021-04-04T15:40:00+00:00</updated>
<id>https://www.talkingquickly.co.uk/deploying-rails-vps-capistrano</id>
<content type="html" xml:base="https://www.talkingquickly.co.uk/deploying-rails-to-a-vps-with-capistrano-v3-and-systemd">&lt;p&gt;Deploying Rails to a VPS with Capistrano remains one of the simplest and most reliable methods for getting a Rails app up-and running. With the likes of Hetzner Cloud, Digital Ocean and Linode providing inexpensive, reliable virtual machines, Rails app serving substantial amounts of traffic can be hosted with minimal cost and complexity.&lt;/p&gt;

&lt;p&gt;In this tutorial we&amp;#39;ll use Capistrano to automate deployment of our application, including generating all required config files, obtaining a free SSL certificate with Lets Encrypt and enabling zero downtime deployment.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;This tutorial is in two parts:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/setting-up-ubuntu-20-04-focal-fossa-vps-for-rails-app-deployment&quot;&gt;Setting up a VPS for Rails app Deployment&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&quot;/deploying-rails-to-a-vps-with-capistrano-v3-and-systemd&quot;&gt;Deploying Rails to Ubuntu 20.04 with Capistrano&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the previous post we used Chef to prepare an Ubuntu 20.04 server for deployment of our Rails application. This included installing Nginx, PostgreSQL, Redis and our Ruby version of choice. We used Chef for this rather than entering command manually so that we can trivially create additional identical servers in future without needing to remember lots of terminal commands and config file edits.&lt;/p&gt;

&lt;p&gt;Note that this post is intended to be a tutorial rather than a reference, so the focus will be on the steps that need to be completed rather than exploring the why.&lt;/p&gt;

&lt;h2&gt;Setting up DNS&lt;/h2&gt;

&lt;p&gt;In order to obtain an SSL certificate for our application, we will need to have public DNS setup.&lt;/p&gt;

&lt;p&gt;So if we want our application to be available on &lt;code&gt;https://myapp.example.com&lt;/code&gt; then we would need to own the domain &lt;code&gt;example.com&lt;/code&gt; and be able to create DNS records for it.&lt;/p&gt;

&lt;p&gt;Assuming our server had the IP address &lt;code&gt;203.0.113.1&lt;/code&gt; we should now create an &amp;quot;A&amp;quot; record for &lt;code&gt;myapp.example.com&lt;/code&gt; with content &lt;code&gt;203.0.113.1&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We can check that our DNS entry has been created correctly using &lt;code&gt;dig myapp.example.com&lt;/code&gt;. Replacing &lt;code&gt;myapp.example.com&lt;/code&gt; with your domain.&lt;/p&gt;

&lt;p&gt;If you don&amp;#39;t have a domain yet, you can still follow this tutorial, but it won&amp;#39;t be possible to obtain an SSL certificate. In this scenario simply add the following line to your local hosts file &lt;code&gt;/etc/hosts&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;SERVER_IP LOCALHOSTNAME
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So, for example:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;203.0.113.1 myapp.local
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will allow you to access the app over http (but not https) on &lt;code&gt;myapp.local&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;Adding Gems&lt;/h2&gt;

&lt;p&gt;We then add the following to our Gemfile:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;# The puma application server, we probably already have this
gem &amp;#39;puma&amp;#39;, &amp;#39;~&amp;gt; 5.0&amp;#39;

group :development do
  # Including capistrano cookbook will automatically includes
  # the correct version of capistrano and other plugins
  gem &amp;#39;capistrano-cookbook&amp;#39;, require: false
end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and run &lt;code&gt;bundle install&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;Generating Local Configuration&lt;/h2&gt;

&lt;p&gt;Capistrano Cookbook is a convenience gem that provides some helper tasks and a Rails Generator for bootstrapping the typical configuration used when deploying a Rails application both with or without Sidekiq.&lt;/p&gt;

&lt;p&gt;To generate configuration execute the following:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;bundle exec rails g capistrano:reliably_deploying_rails:bootstrap --sidekiq --production_hostname=&amp;#39;YOUR_HOSTNAME&amp;#39; --production_server_address=&amp;#39;SERVER_IP&amp;#39; --certbot_enable --certbot_email=&amp;#39;YOUR_EMAIL&amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Replacing:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;YOUR_HOSTNAME&lt;/code&gt; with the address our application will be accessible on. Note that if we are not creating a DNS entry and instead are creating an entry in our local hosts file then we &lt;strong&gt;must&lt;/strong&gt; remove the &lt;code&gt;--certbot_*&lt;/code&gt; flags&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SERVER_IP&lt;/code&gt; with the IP address of the VPS you are deploying to. In single server configurations this could also be the same as &lt;code&gt;YOUR_PRODUCTION_HOSTNAME&lt;/code&gt; but that approach adds some fragility if, in the future, you decide to add additional frontend servers behind a load balancer to handle additional load.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;YOUR_EMAIL&lt;/code&gt; with the email email address LetsEncrypt can send certificate expiry notifications to. These notifications are generally for information only as our configuration automatically renews certificates when the expire so you may want to add a suffix, e.g. &amp;quot;youremail+letsencrypt&amp;quot; to make it easy to filter these emails with automated rules.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And optionally keeping or removing this flags:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--sidekiq&lt;/code&gt; removing this flag if we are not using Sidekiq for background jobs. If this flag is present the generator will include the required logic and templates to have Sidekiq automatically deployed and restarted alongside the core Rails application&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--certbot_enable&lt;/code&gt; and &lt;code&gt;--certbot_email&lt;/code&gt; we should remove these flags if we do not want to have a free SSL certificate for &lt;code&gt;YOUR_HOSTNAME&lt;/code&gt; generated. we&amp;#39;ll definitely want to remove these flags if we&amp;#39;re testing locally with something like vagrant or if you don&amp;#39;t yet have a domain with DNS setup, e.g. when using local hosts file to map domains to IP&amp;#39;s.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This will generate the following files and folders:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;Capfile
config
  ├── deploy.rb
  └── deploy
      ├── production.rb
      ├── staging.rb
      └── templates
          ├── nginx_conf.erb
          ├── puma_monit.conf.erb
          ├── puma.rb.erb
          ├── puma.service.erb
          ├── sidekiq_monit.erb
          └── sidekiq.service.capistrano.erb
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The files in &lt;code&gt;templates&lt;/code&gt; are primarily overrides for the default configuration files created by the excellent &lt;code&gt;capistrano-puma&lt;/code&gt; and &lt;code&gt;capistrano-sidekiq&lt;/code&gt; gems which addresses some &lt;a href=&quot;/capistrano-puma-neither-valid-executable-nor-absolute-path&quot;&gt;issues that can arise&lt;/a&gt; when using systemd and &lt;code&gt;capistrano-rbenv&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;It also generates Monit definitions which are compatible with systemd. While in some respects systemd and Monit serve similar functions - both can ensure that our application and background workers are always running and started at boot - Monit can provide a layer of additional verification, for example checking ports are accessible and HTTP response codes and taking actions if this changes, so we&amp;#39;ll generally require both for a robust configuration. &lt;/p&gt;

&lt;h2&gt;Configuring Stages&lt;/h2&gt;

&lt;p&gt;The file &lt;code&gt;deploy.rb&lt;/code&gt; contains our general deployment configuration, and looks something like this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# config valid for current version and patch releases of Capistrano&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;lock&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;~&amp;gt; 3.16.0&amp;quot;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:application&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;rdra_rails6_example&amp;#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:deploy_user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;deploy&amp;#39;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# setup repo details&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:repo_url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;git@github.com:TalkingQuickly/rdra_rails6_example.git&amp;#39;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# setup rbenv.&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:rbenv_type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:system&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:rbenv_ruby&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;3.0.0&amp;#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:rbenv_prefix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;RBENV_ROOT=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:rbenv_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; RBENV_VERSION=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:rbenv_ruby&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:rbenv_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/bin/rbenv exec&amp;quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:rbenv_map_bins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;%w{rake gem bundle ruby rails}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# setup certbot for SSL via letsencrypt&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:certbot_enable_ssl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:certbot_redirect_to_https&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:certbot_email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;ben@talkingquickly.co.uk&amp;quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:certbot_use_acme_staging&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# setup puma to operate in clustered mode, required for zero downtime deploys&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:puma_preload_app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:puma_init_active_record&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:puma_workers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:puma_systemctl_user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:deploy_user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:puma_enable_lingering&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;


&lt;span class=&quot;n&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:sidekiq_systemctl_user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:deploy_user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:sidekiq_enable_lingering&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;


&lt;span class=&quot;c1&quot;&gt;# how many old releases do we want to keep&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:keep_releases&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Directories that should be linked to the shared folder&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:linked_dirs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;log&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;tmp/pids&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;tmp/cache&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;tmp/sockets&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;vendor/bundle&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;.bundle&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;public/system&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;public/uploads&amp;#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:linked_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;config/database.yml&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;config/master.key&amp;#39;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# this:&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# http://www.capistranorb.com/documentation/getting-started/flow/&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# is worth reading for a quick overview of what tasks are called&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# and when for `cap stage deploy`&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:deploy&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is where we set configuration that is the same no matter whether we&amp;#39;re deploying to production, staging or any other environment.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;capistrano-cookbook&lt;/code&gt; will have attempted to infer the following values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;application&lt;/code&gt; from the name of the Rails application&lt;/li&gt;
&lt;li&gt;&lt;code&gt;repo_url&lt;/code&gt; from the current folders git &lt;code&gt;origin&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And the following values should be manually set according to our apps requirements:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;rbenv_ruby&lt;/code&gt; to the Ruby version the app requires&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The two other files which contain deployment configuration are &lt;code&gt;production.rb&lt;/code&gt; and &lt;code&gt;staging.rb&lt;/code&gt;. These are known as stages in Capistrano.&lt;/p&gt;

&lt;p&gt;When we run Capistrano commands we will do so in the form &lt;code&gt;cap STAGE_NAME COMMAND&lt;/code&gt;. So if we were to run &lt;code&gt;cap production COMMAND&lt;/code&gt; then the contents of &lt;code&gt;config/deploy/production.rb&lt;/code&gt; would be evaluated before executing &lt;code&gt;COMMAND&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Our &lt;code&gt;production.rb&lt;/code&gt; by default looks something like this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:stage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:production&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:branch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;master&amp;quot;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# This is used in the Nginx VirtualHost to specify which domains&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# the app should appear on. If you don&amp;#39;t yet have DNS setup, you&amp;#39;ll&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# need to create entries in your local Hosts file for testing.&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:nginx_server_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;rdr-rails6-example.staging.talkingquickly.co.uk&amp;#39;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# used in case we&amp;#39;re deploying multiple versions of the same&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# app side by side. Also provides quick sanity checks when looking&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# at filepaths&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:full_app_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:application&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:stage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;


&lt;span class=&quot;c1&quot;&gt;# Name sidekiq systemd service after the app and stage name so that&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# multiple apps and stages can co-exist on the same machine if needed&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:sidekiq_service_unit_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;sidekiq_&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:full_app_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;


&lt;span class=&quot;n&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;65.21.54.211&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;deploy&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;roles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;%w{web app db}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;primary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:deploy_to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;/home/&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:deploy_user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/apps/&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:full_app_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# dont try and infer something as important as environment from&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# stage name.&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:rails_env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:production&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Where &lt;code&gt;nginx_server_name&lt;/code&gt; is set to our production server and the first argument being passed to &lt;code&gt;server&lt;/code&gt; is our production servers IP address.&lt;/p&gt;

&lt;p&gt;The only value we may want to tweak is &lt;code&gt;:branch&lt;/code&gt; which defines which branch should be used to deploy to this server. So if we were following a &amp;quot;git flow&amp;quot; type model, we might set this to &lt;code&gt;master&lt;/code&gt; in &lt;code&gt;production.rb&lt;/code&gt; and &lt;code&gt;develop&lt;/code&gt; in &lt;code&gt;staging.rb&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;Generating Remote Configuration&lt;/h2&gt;

&lt;p&gt;Now that we&amp;#39;ve confirmed all of our local configuration is correct, we can upload all of our one time configuration to the remote server.&lt;/p&gt;

&lt;p&gt;This is accomplished with the &lt;a href=&quot;https://github.com/TalkingQuickly/capistrano-cookbook/blob/master/lib/capistrano/cookbook/tasks/setup_config.cap&quot;&gt;task&lt;/a&gt; &lt;code&gt;deploy:setup_config&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This task is responsible for copying one time configuration to the remote server, specifically:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Systemd unit files&lt;/li&gt;
&lt;li&gt;Monit definitions &lt;/li&gt;
&lt;li&gt;The Rails master key&lt;/li&gt;
&lt;li&gt;Log rotation definitions&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;As well as enabling the relevant systemd services, requesting the SSL certificate and having certbot update our nginx configuration file to reference it.&lt;/p&gt;

&lt;p&gt;We can execute this task with:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;bundle exec cap production deploy:setup_config
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Setting up our database&lt;/h2&gt;

&lt;p&gt;The final step required before deploying our application for the first time is setting up our database.&lt;/p&gt;

&lt;p&gt;If we are using Postgres, &lt;code&gt;capistrano-cookbook&lt;/code&gt; includes the &lt;a href=&quot;https://github.com/TalkingQuickly/capistrano-cookbook/blob/master/lib/capistrano/cookbook/tasks/create_database.cap&quot;&gt;task&lt;/a&gt; &lt;code&gt;database:create&lt;/code&gt; which will:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create a &lt;code&gt;database.yml&lt;/code&gt; with a random password&lt;/li&gt;
&lt;li&gt;Create the database using the master Postgres user&lt;/li&gt;
&lt;li&gt;Create the user specified in &lt;code&gt;database.yml&lt;/code&gt; and grants them access to the database&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So we can simply execute:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;bundle exec cap production database:create
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And our database will be ready for use.&lt;/p&gt;

&lt;p&gt;If we wish to setup our database manually, we will need to create the appropriate database and user, then create a suitable &lt;code&gt;database.yml&lt;/code&gt; file on our remote server in &lt;code&gt;/home/deploy/apps/FULL_APP_NAME/shared/config&lt;/code&gt; replacing &lt;code&gt;FULL_APP_NAME&lt;/code&gt; with the value that will be generated for &lt;code&gt;:full_app_name&lt;/code&gt; in our &lt;code&gt;production.rb&lt;/code&gt;. This is typically &lt;code&gt;APP_NAME_STAGE&lt;/code&gt; e.g. &lt;code&gt;my_rails_app_production&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;Disabling Passwordless Sudo (optional)&lt;/h2&gt;

&lt;p&gt;Our configuration commands require the ability for our deploy user to execute sudo commands without being prompted for a password.&lt;/p&gt;

&lt;p&gt;Now that we have finished the initial configuration, this is not required as our deploy tasks are carefully designed to not require any root access (see &lt;a href=&quot;/managing-puma-with-systemd-user-instance-and-monit&quot;&gt;this post&lt;/a&gt; for more on working with userspace systemd).&lt;/p&gt;

&lt;p&gt;We can therefore optionally return to our Chef repository from the &lt;a href=&quot;/setting-up-ubuntu-20-04-focal-fossa-vps-for-rails-app-deployment&quot;&gt;previous&lt;/a&gt; tutorial and use &lt;code&gt;knife node edit NODE_NAME&lt;/code&gt; to add the following under the &lt;code&gt;normal&lt;/code&gt; key:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;authorization&amp;quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;sudo&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;quot;passwordless&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and then run:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;knife zero converge &amp;quot;NODE_NAME&amp;quot; --ssh-user PROVISIONING_USER
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To update the node to not allow passwordless sudo.&lt;/p&gt;

&lt;p&gt;This provides us with some level of additional security because if - through some exploit - an attacker gained the ability to execute arbitrary shell commands as our app user, they would not automatically be able to execute commands as root.&lt;/p&gt;

&lt;h2&gt;Deploying our application&lt;/h2&gt;

&lt;p&gt;We&amp;#39;re now ready to deploy our application. It&amp;#39;s important to note here that Capistrano uses SSH Keychain Forwarding to clone the repository specified in &lt;code&gt;config/deploy.rb&lt;/code&gt; at the branch specified in &lt;code&gt;config/deploy/STAGE_NAME.rb&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This means that if we have local changes which we have not yet pushed to the repository we are deploying from, these changes will not be deployed.&lt;/p&gt;

&lt;p&gt;Once we&amp;#39;ve ensured everything has been pushed, we can deploy with:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;bundle exec cap production deploy
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Our configuration is setup to allow zero downtime deploys, so when we deploy future versions, our newly deployed code will be loaded in the background and then traffic seamlessly transferred over to this new version.&lt;/p&gt;

&lt;h2&gt;Next&lt;/h2&gt;

&lt;p&gt;If you&amp;#39;ve run into any issues, please feel free to ping me on Twitter where I&amp;#39;m &lt;a href=&quot;https://www.twitter.com/talkingquickly&quot;&gt;@talkingquickly&lt;/a&gt; or open an issue on the &lt;a href=&quot;https://github.com/TalkingQuickly/capistrano-cookbook&quot;&gt;capistrano cookbook repository&lt;/a&gt; and I&amp;#39;ll do my best to help.&lt;/p&gt;

&lt;p&gt;There&amp;#39;s also an example Rails app available &lt;a href=&quot;https://github.com/TalkingQuickly/rdra_rails6_example&quot;&gt;here&lt;/a&gt; which shows this configuration in action.&lt;/p&gt;
</content>
<summary>Deploying Rails to a VPS with Capistrano remains one of the simplest and most reliable methods for getting a Rails app up-and running. With the likes of Hetzner Cloud, Digital Ocean and Linode providing inexpensive, reliable virtual machines, Rails app serving substantial amounts of traffic can be hosted with minimal cost and complexity.In this tutorial we&amp;#39;ll use Capistrano to automate deployment of our application, including generating all required config files, obtaining a free SSL certificate with Lets Encrypt and enabling zero downtime deployment.</summary>
</entry>
<entry>
<title>Setting up Ubuntu 20.04 for Rails app Deployment</title>
<link href="https://www.talkingquickly.co.uk/setting-up-ubuntu-20-04-focal-fossa-vps-for-rails-app-deployment" rel="alternate" type="text/html" title="Setting up Ubuntu 20.04 for Rails app Deployment" />
<published>2021-04-04T15:40:00+00:00</published>
<updated>2021-04-04T15:40:00+00:00</updated>
<id>https://www.talkingquickly.co.uk/deploying-rails-vps-capistrano-systemd</id>
<content type="html" xml:base="https://www.talkingquickly.co.uk/setting-up-ubuntu-20-04-focal-fossa-vps-for-rails-app-deployment">&lt;p&gt;Deploying Rails to a VPS with Capistrano remains one of the simplest and most reliable methods for getting a Rails app up-and running. With the likes of Hetzner Cloud, Digital Ocean and Linode providing inexpensive, reliable virtual machines, Rails app serving substantial amounts of traffic can be hosted with minimal cost and complexity.&lt;/p&gt;

&lt;p&gt;We&amp;#39;ll first use Chef to provision a VPS including securing and hardening the server, installing the correct Ruby version(s) and setting up Postgres and Redis. We&amp;#39;ll then use Capistrano to deploy our Rails app, including appropriate systemd units to ensure our services are started automatically on boot .&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;This tutorial is in two parts:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&quot;/setting-up-ubuntu-20-04-focal-fossa-vps-for-rails-app-deployment&quot;&gt;Setting up a VPS for Rails app Deployment&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/deploying-rails-to-a-vps-with-capistrano-v3-and-systemd&quot;&gt;Deploying Rails to Ubuntu 20.04 with Capistrano&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note that this post is intended to be a tutorial rather than a reference, so the focus will be on the steps that need to be completed rather than exploring the why.&lt;/p&gt;

&lt;h2&gt;The Stack&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Ubuntu 20.04 Focal Fossa (Current &lt;a href=&quot;https://ubuntu.com/about/release-cycle&quot;&gt;LTS&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;PostgreSQL 13 (Other versions selectable)&lt;/li&gt;
&lt;li&gt;Ruby 3.0 (Other versions selectable)&lt;/li&gt;
&lt;li&gt;Redis, Memcached (optional)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Chef&lt;/h2&gt;

&lt;p&gt;Rather than executing lots of commands by hand, we&amp;#39;ll use Chef to automate the setup of the server. This means that when we need to provision another, identical server, we need just one command rather than having to try and remember all the shell commands. Chef is similar to tools such as Puppet or Ansible with the advantage for our use case that it&amp;#39;s both written in and leverages for configuration, Ruby.&lt;/p&gt;

&lt;h2&gt;Installing Chef&lt;/h2&gt;

&lt;p&gt;On OSX we can Install Chef by executing the following in a terminal:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;curl https://packages.chef.io/files/stable/chef-workstation/21.2.303/mac_os_x/11.0/chef-workstation-21.2.303-1.x86_64.dmg --output /tmp/chef-workstation.dmg
hdiutil attach /tmp/chef-workstation.dmg
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then visiting the newly mounted &amp;quot;Chef Workstation&amp;quot; volume in finder, double clicking on the &lt;code&gt;.pkg&lt;/code&gt; and following the installation prompts.&lt;/p&gt;

&lt;p&gt;On Ubuntu / Debian based systems, Chef Workstation can be installed with:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;curl https://packages.chef.io/files/stable/chef-workstation/21.2.303/debian/10/chef-workstation_21.2.303-1_amd64.deb --output /tmp/chef-workstation.deb
sudo dpkg -i /tmp/chef-workstation.deb
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Alternatively the latest version can be downloaded from &lt;code&gt;https://downloads.chef.io/products/workstation&lt;/code&gt;, this tutorial has been tested with version &lt;code&gt;21.2.303&lt;/code&gt; but should be broadly compatible with &lt;code&gt;21.x&lt;/code&gt; releases.&lt;/p&gt;

&lt;p&gt;Once this step is complete, executing &lt;code&gt;chef&lt;/code&gt; in a local terminal should give help output from Chef, rather than a command not found error.&lt;/p&gt;

&lt;h2&gt; Installing Knife&lt;/h2&gt;

&lt;p&gt;Knife is the CLI tool that we will use to interact with Chef, we can install it by executing:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;chef gem install knife-zero
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note this command should not be executed from within a folder with a &lt;code&gt;Gemfile&lt;/code&gt; as this may lead to hard to debug &lt;code&gt;bundler not found&lt;/code&gt; errors.&lt;/p&gt;

&lt;h2&gt;Creating a VPS&lt;/h2&gt;

&lt;p&gt;We should now head to our favourite VPS provider. My current preference is Hetzner Cloud with Digital Ocean and Linode in close second. &lt;/p&gt;

&lt;p&gt;For a non-trivial Rails application we probably don&amp;#39;t want to go below 1GB of RAM, likewise since we&amp;#39;re going to be running both our application and database servers on a single machine, we probably want at least 2 cores. 3 Cores and 4GB RAM is generally a comfortable starting point which is equivalent to Hetzners CPX21.&lt;/p&gt;

&lt;p&gt;We can now choose Ubuntu 20.04 as the system image, boot it up and make a note of the IP address.&lt;/p&gt;

&lt;h2&gt;Setup key based SSH&lt;/h2&gt;

&lt;p&gt;If we configured key based authentication as part of the VPS creation process, this step can be skipped.&lt;/p&gt;

&lt;p&gt;If however when we execute &lt;code&gt;ssh USERNAME@SERVER_IP&lt;/code&gt; (where &lt;code&gt;USERNAME&lt;/code&gt; is the username our VPS provider gave us to use and &lt;code&gt;SERVER_IP&lt;/code&gt; is our servers IP address) we are required to enter a password then we need to setup key based auth.&lt;/p&gt;

&lt;p&gt;Key based authentication allows us to authenticate using our local public / private key pair rather than a password. This is important because as part of the server hardening process, we will later disable password based authentication completely.&lt;/p&gt;

&lt;p&gt;We can copy our public key to the server with:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;ssh-copy-id USERNAME@SERVER_IP
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will prompt us for our password one more time and then add our public key to the list of allowed keys in the remote servers &lt;code&gt;~/.ssh/authorized_keys&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We should then be able to execute &lt;code&gt;ssh USERNAME@SERVER_IP&lt;/code&gt; to login to our remote server without being required to enter a password. Note if we&amp;#39;re still being required to enter the passphrase for our local SSH key, we can avoid this by executing &lt;code&gt;ssh-add&lt;/code&gt; to temporarily store credentials in the local ssh agent.&lt;/p&gt;

&lt;h2&gt;Getting the sample code&lt;/h2&gt;

&lt;p&gt;Next we need to clone the sample Chef &lt;a href=&quot;https://github.com/TalkingQuickly/rails-server-template&quot;&gt;repository&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;git clone git@github.com:TalkingQuickly/rails-server-template.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And then enter the sample code folder with &lt;code&gt;cd rails-server-template&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;Preparing the node&lt;/h2&gt;

&lt;p&gt;We can now prepare the server (node in Chef terminology) for provisioning with the following command:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;knife zero bootstrap SERVER_IP --connection-user SSH_USER --node-name NODE_NAME
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;replacing &lt;code&gt;SERVER_IP&lt;/code&gt; with our servers IP address, &lt;code&gt;SSH_USER&lt;/code&gt; with the same username we used when setting up key based login above and &lt;code&gt;NODE_NAME&lt;/code&gt; with a friendly name for the node, e.g. &lt;code&gt;rails_app_server&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;This will connect to the remote server, install Chef and generate the local file &lt;code&gt;nodes/NODE_NAME.json&lt;/code&gt;. This is the file where all details about the node and what should be installed on it will be stored.&lt;/p&gt;

&lt;p&gt;If we&amp;#39;ve never connected to the node via SSH before, we may be asked to confirm the servers fingerprint by entering &lt;code&gt;Y&lt;/code&gt; and pressing enter.&lt;/p&gt;

&lt;h2&gt;Configuring the Node&lt;/h2&gt;

&lt;p&gt;The above step created a JSON file which stores information about the node in &lt;code&gt;nodes/NODE_NAME.json&lt;/code&gt; but we should not edit that file directly.&lt;/p&gt;

&lt;p&gt;Instead we can use the following command to edit the node definition:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;knife node edit NODE_NAME
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Replacing &lt;code&gt;NODE_NAME&lt;/code&gt; with the name used above. This will open a JSON file in the editor defined in &lt;code&gt;knife.rb&lt;/code&gt;, by default this will be &lt;code&gt;vim&lt;/code&gt;, but we can change it to any editor we want by updating the &lt;code&gt;knife[:editor]&lt;/code&gt; variable in &lt;code&gt;knife.rb&lt;/code&gt;, e.g. &lt;code&gt;code --wait&lt;/code&gt; for VSCode or &lt;code&gt;subl -n -w&lt;/code&gt; for sublime text.&lt;/p&gt;

&lt;p&gt;We can then update our configuration &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;NODE_NAME&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;quot;chef_environment&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;_default&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;quot;normal&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;postgresql&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;quot;version&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;POSTGRES_VERSION&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;quot;password&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;quot;postgres&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;SOME_RANDOM_PASSSWORD&amp;quot;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;rbenv&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;quot;rubies&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&amp;quot;RUBY_VERSION&amp;quot;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;quot;global&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;RUBY_VERSION&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;quot;gems&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;quot;RUBY_VERSION&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;bundler&amp;quot;&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;knife_zero&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;quot;host&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;SERVER_IP&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;tags&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;quot;policy_name&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;quot;policy_group&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;quot;run_list&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&amp;quot;role[server]&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&amp;quot;role[nginx-server]&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&amp;quot;role[postgres-server]&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&amp;quot;role[rails-app]&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&amp;quot;role[redis-server]&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&amp;quot;role[memcached-server]&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Replacing:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;NODE_NAME&lt;/code&gt; with the node name we&amp;#39;ve been using&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SERVER_IP&lt;/code&gt; with the server ip address &lt;/li&gt;
&lt;li&gt;&lt;code&gt;SOME_RANDOM_PASSWORD&lt;/code&gt; with the password we want to be set for the postgres master user&lt;/li&gt;
&lt;li&gt;&lt;code&gt;RUBY_VERSION&lt;/code&gt; in three places with the Ruby version we need for our Rails application&lt;/li&gt;
&lt;li&gt;&lt;code&gt;POSTGRES_VERSION&lt;/code&gt; with the Postgres version we want, if in doubt 13 is the current stable release and should work for most setups&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We can then save and close the node definition.&lt;/p&gt;

&lt;h2&gt;Setting up users&lt;/h2&gt;

&lt;p&gt;Our final step is to create a non-root user which will later be used by Capistrano to deploy our application.&lt;/p&gt;

&lt;p&gt;To do this we first generate a password for the user by executing the following locally:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;openssl passwd -1 &amp;quot;SOME_RANDOM_PASSWORD&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And making a note of the output.&lt;/p&gt;

&lt;p&gt;We then create a Chef data bag called &lt;code&gt;users&lt;/code&gt; with an entry &lt;code&gt;deploy&lt;/code&gt; using the following command:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;knife data_bag create users deploy
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will create the file &lt;code&gt;data_bags/users/deploy.json&lt;/code&gt; which we should then open and replace the contents with:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;quot;id&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;deploy&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;quot;password&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;ENCRYPTED_PASSWORD&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;quot;ssh_keys&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&amp;quot;PUBLIC_KEY&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;quot;groups&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&amp;quot;sysadmin&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;quot;shell&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;/bin/bash&amp;quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Replacing &lt;code&gt;ENCRYPTED_PASSWORD&lt;/code&gt; with the output of the &lt;code&gt;openssl&lt;/code&gt; command above and &lt;code&gt;PUBLIC_KEY&lt;/code&gt; with your public key, generally the contents of your local &lt;code&gt;~/.ssh/id_rsa.pub&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;Applying configuration to the node&lt;/h2&gt;

&lt;p&gt;We&amp;#39;re now ready to apply our configuration to the node with the following command:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;knife zero converge &amp;quot;name:NODE_NAME&amp;quot; --ssh-user `SSH_USER`.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Replacing &lt;code&gt;NODE_NAME&lt;/code&gt; with the name we used above and &lt;code&gt;SSH_USER&lt;/code&gt; with the user we setup key based authentication for (often &lt;code&gt;root&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;The first time we run this, it will take a while as it has to install all of the servers components including compiling our Ruby version.&lt;/p&gt;

&lt;p&gt;If we make changes to our configuration, for example by editing the node definition and overriding more values from roles, we simply run the above command again to have the changes applied.&lt;/p&gt;

&lt;h2&gt;What we&amp;#39;ve set up&lt;/h2&gt;

&lt;p&gt;We now have a hardened server, ready to deploy a Rails application for. We can create an unlimited number of identical servers simply by following the above process.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;https://leanpub.com/deploying_rails_applications&quot;&gt;book&lt;/a&gt; provides more detail on exactly what&amp;#39;s going on behind the scenes and how to customise it but at a high level we have:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Installed a firewall which limits access to ports 22 (SSH), 80 (HTTP) and 443 (HTTPS)&lt;/li&gt;
&lt;li&gt;Disabled password based SSH login and installed fail2ban to block suspicious logins&lt;/li&gt;
&lt;li&gt;Enabled automatic OS and core package updates &lt;/li&gt;
&lt;li&gt;Installed Nginx, Postgres, Redis and Memcached&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Next&lt;/h2&gt;

&lt;p&gt;Assuming everything has gone well, we can now continue to &lt;a href=&quot;deploying-rails-to-a-vps-with-capistrano-and-systemd&quot;&gt;deploying our Rails application with Capistrano&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you&amp;#39;ve run into any issues, please feel free to ping me on Twitter where I&amp;#39;m &lt;a href=&quot;https://www.twitter.com/talkingquickly&quot;&gt;@talkingquickly&lt;/a&gt; or open an issue on the &lt;a href=&quot;https://github.com/TalkingQuickly/rails-server-template&quot;&gt;sample code repository&lt;/a&gt; and I&amp;#39;ll do my best to help.&lt;/p&gt;
</content>
<summary>Deploying Rails to a VPS with Capistrano remains one of the simplest and most reliable methods for getting a Rails app up-and running. With the likes of Hetzner Cloud, Digital Ocean and Linode providing inexpensive, reliable virtual machines, Rails app serving substantial amounts of traffic can be hosted with minimal cost and complexity.We&amp;#39;ll first use Chef to provision a VPS including securing and hardening the server, installing the correct Ruby version(s) and setting up Postgres and Redis. We&amp;#39;ll then use Capistrano to deploy our Rails app, including appropriate systemd units to ensure our services are started automatically on boot .</summary>
</entry>
<entry>
<title>Managing puma with the systemd user instance and monit</title>
<link href="https://www.talkingquickly.co.uk/managing-puma-with-systemd-user-instance-and-monit" rel="alternate" type="text/html" title="Managing puma with the systemd user instance and monit" />
<published>2021-03-23T15:40:00+00:00</published>
<updated>2021-03-23T15:40:00+00:00</updated>
<id>https://www.talkingquickly.co.uk/controlling-puma-with-systemd-userspace-and-monit</id>
<content type="html" xml:base="https://www.talkingquickly.co.uk/managing-puma-with-systemd-user-instance-and-monit">&lt;p&gt;Many guides to deploying Rails with Capistrano will use systemd to have it auto-started when the system boots. This is often done using the system instance of systemd which by default can only be controlled by root.&lt;/p&gt;

&lt;p&gt;The typical workaround for this is either to grant our Capistrano deployment user passwordless sudo access or to grant them passwordless sudo access to just the commands required to restart the rails (and potentially sidekiq) systemd services.&lt;/p&gt;

&lt;p&gt;This can be avoided by using the systemd user instance, which allows persistent services to be managed as a non-root user. This is compatible with the default systemd configuration in Ubuntu 20.04.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;There are multiple locations systemd user instance units can be located, there&amp;#39;s more &lt;a href=&quot;https://wiki.archlinux.org/index.php/systemd/User&quot;&gt;here&lt;/a&gt;, in this case we&amp;#39;ll be using: &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;~/.config/systemd/user/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In here we&amp;#39;ll put a systemd unit file similar to the following:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;[Unit]
Description=Puma HTTP Server for RAILS APP NAME (ENVIRONMENT)
After=network.target

[Service]
Type=simple

WorkingDirectory=/home/deploy/apps/APP_NAME/current
ExecStart=/usr/local/rbenv/bin/rbenv exec bundle exec puma -C /home/deploy/apps/APP_NAME/shared/puma.rb
ExecReload=/bin/kill -USR1 $MAINPID
ExecStop=/bin/kill -TSTP $MAINPID
StandardOutput=append:/home/deploy/apps/APP_NAME/shared/log/puma_access.log
StandardError=append:/home/deploy/apps/APP_NAME/shared/log/puma_error.log

Environment=RBENV_VERSION=3.0.0
Environment=RBENV_ROOT=/usr/local/rbenv

Restart=always
RestartSec=1

SyslogIdentifier=APP_NAME

[Install]
WantedBy=default.target
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;capistrano-puma&lt;/code&gt; Gem can auto-generate this file and the &lt;code&gt;capistrano-cookbook&lt;/code&gt; gem provides and overridden version of the template which fixes some rbenv compatibility issues and allows for zero downtime deploys (as well as also generating all other capistrano configuration automatically).&lt;/p&gt;

&lt;p&gt;You can see the most recent Capistrano Cookbooks unit file template - which may be useful as a reference - &lt;a href=&quot;https://github.com/TalkingQuickly/capistrano-cookbook/blob/master/lib/generators/capistrano/reliably_deploying_rails/templates/puma.service.erb&quot;&gt;here&lt;/a&gt; which is a tweaked version of the version in &lt;code&gt;capistrano-puma&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Note a few things about this unit file:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;There is no &lt;code&gt;User&lt;/code&gt; directive, user services will run as the user in question, including a &lt;code&gt;User&lt;/code&gt; directive may lead to non-descriptive &lt;code&gt;service start request repeated too quickly, refusing to start&lt;/code&gt; type errors&lt;/li&gt;
&lt;li&gt;Our Environment variables are not included in the &lt;code&gt;ExecStart&lt;/code&gt; command, they&amp;#39;re in separate &lt;code&gt;Environment&lt;/code&gt; lines, &lt;a href=&quot;http://www.talkingquickly.co.uk/capistrano-puma-neither-valid-executable-nor-absolute-path&quot;&gt;this is explained here&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;WantedBy&lt;/code&gt; is set to &lt;code&gt;default.target&lt;/code&gt; which is the correct value for user services if we want them to be started at boot&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In order for our service to be started at boot, we then need to enable this service with:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;systemctl --user enable UNIT_FILE_NAME
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note that this is different to starting the unit. We can start a unit immediately with &lt;code&gt;systemctl --user start UNIT_FILE_NAME&lt;/code&gt; but this does not set the unit to be started on boot, so we must enable it as well. This is taken care of automatically if you&amp;#39;re using the &lt;code&gt;deploy:setup_config&lt;/code&gt; task from &lt;code&gt;capistrano-cookbook&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Our next challenge is that by default, user instance systemd services are only started when the user starts a session and will continue to run only while the user in question has an active session.&lt;/p&gt;

&lt;p&gt;To resolve this we must enable &lt;a href=&quot;http://manpages.ubuntu.com/manpages/xenial/man1/loginctl.1.html&quot;&gt;lingering&lt;/a&gt;, lingering ensures that a manager for the user in question in spawned on boot so that the user can manage long run services.&lt;/p&gt;

&lt;p&gt;We can enable lingering with:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;loginctl enable-linger USERNAME
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Where USERNAME is the capistrano deployment user. This is taken care of automatically if you&amp;#39;re using the &lt;code&gt;deploy:setup_config&lt;/code&gt; task from &lt;code&gt;capistrano-cookbook&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Finally we may want to monitor our systemd service with Monit. While there is crossover between systemd and monit, both will monitor that a process is running and start it if not.&lt;/p&gt;

&lt;p&gt;Monit however adds some additional capabilities on top of systemd, it can allow for significantly more complex checks such as making sure that our service is responding on a given port and even check the contents of certain healthcheck responses and issuing restarts if these aren&amp;#39;t matched.&lt;/p&gt;

&lt;p&gt;Monit however runs as root and we need it to control a systemd user service.&lt;/p&gt;

&lt;p&gt;We may initially think we can use something like:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;start program = &amp;quot;/usr/bin/systemctl --user start SYSTEMD_SERVICE_UNIT_FILE&amp;quot; as uid &amp;quot;deploy&amp;quot; and gid &amp;quot;deploy&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As our start program where &lt;code&gt;deploy&lt;/code&gt; is our Capistrano user. We might expect this to be equivalent to running &lt;code&gt;systemctl --user start&lt;/code&gt; as the deploy user in a shell. While the command will be run as that user, due to some missing environment variables, we&amp;#39;re likely to get an error along the lines of:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;Failed to get D-bus connection: no such file or directory
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is due to &lt;code&gt;XDG_RUNTIME_DIR&lt;/code&gt; &lt;a href=&quot;https://serverfault.com/questions/936985/cannot-use-systemctl-user-due-to-failed-to-get-d-bus-connection-permission&quot;&gt;not being set correctly&lt;/a&gt; when users are switched in this way. The same issue can happen if we try and use &lt;code&gt;su&lt;/code&gt; in Capistrano to change users before executing a &lt;code&gt;systemctl --user&lt;/code&gt; command.&lt;/p&gt;

&lt;p&gt;We can resolve is by modifying our start command to set this environment variable manually. So a simple monit definition might look like this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;check process APP_NAME
  with pidfile &amp;quot;/home/deploy/apps/APP_NAME/shared/tmp/pids/puma.pid&amp;quot;
  start program = &amp;quot;/bin/bash -c &amp;#39;XDG_RUNTIME_DIR=/run/user/$(id -u) /usr/bin/systemctl start --user SYSTEMD_SERVICE_UNIT_FILE&amp;#39;&amp;quot; as uid &amp;quot;deploy&amp;quot; and gid &amp;quot;deploy&amp;quot;
  stop program = &amp;quot;/bin/bash -c &amp;#39;XDG_RUNTIME_DIR=/run/user/$(id -u) /usr/bin/systemctl stop --user SYSTEMD_SERVICE_UNIT_FILE&amp;#39;&amp;quot; as uid &amp;quot;deploy&amp;quot; and gid &amp;quot;deploy&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can see the most recent version of &lt;code&gt;capistrano cookbooks&lt;/code&gt; monit definition &lt;a href=&quot;https://github.com/TalkingQuickly/capistrano-cookbook/blob/master/lib/generators/capistrano/reliably_deploying_rails/templates/puma_monit.conf.erb&quot;&gt;here&lt;/a&gt; which may be useful as a reference.&lt;/p&gt;

&lt;p&gt;With all of this completed, we should now have puma being managed by a systemd service, which will auto start at boot, and is monitored with monit.&lt;/p&gt;
</content>
<summary>Many guides to deploying Rails with Capistrano will use systemd to have it auto-started when the system boots. This is often done using the system instance of systemd which by default can only be controlled by root.The typical workaround for this is either to grant our Capistrano deployment user passwordless sudo access or to grant them passwordless sudo access to just the commands required to restart the rails (and potentially sidekiq) systemd services.This can be avoided by using the systemd user instance, which allows persistent services to be managed as a non-root user. This is compatible with the default systemd configuration in Ubuntu 20.04.</summary>
</entry>
<entry>
<title>Capistrano &amp;amp; Puma with Systemd; Permission denied @ rbioreopen</title>
<link href="https://www.talkingquickly.co.uk/capistrano-puma-systemd-permission-denied-@rb_io_repopen" rel="alternate" type="text/html" title="Capistrano &amp; Puma with Systemd; Permission denied @ rb_io_reopen" />
<published>2021-03-16T15:40:00+00:00</published>
<updated>2021-03-16T15:40:00+00:00</updated>
<id>https://www.talkingquickly.co.uk/capistrano-puma-permission-denied-rb_io_reopen</id>
<content type="html" xml:base="https://www.talkingquickly.co.uk/capistrano-puma-systemd-permission-denied-@rb_io_repopen">&lt;p&gt;When using the capistrano puma gem with systemd, we may get the error:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;Permission denied @ rb_io_reopen - /home/deploy/LOG_FILE_PATH/shared/log/puma_access.log (Errno::EACCES)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This may be caused by doubling up on the puma app servers logging.&lt;/p&gt;

&lt;p&gt;Typically our systemd unit will contain something like:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;StandardOutput=append:/home/deploy/LOG_FILE_PATH/shared/log/puma_access.log
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Which means that any data written to standard output will be appended to the log file specified by systemd.&lt;/p&gt;

&lt;p&gt;If we&amp;#39;re getting the above error, it&amp;#39;s also likely that our &lt;code&gt;puma.rb&lt;/code&gt; configuration file contains something like:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;stdout_redirect &amp;#39;/home/deploy/LOG_FILE_PATH/shared/log/puma_access.log&amp;#39;, true
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Which tells puma itself to write to a log file instead of to stdout.&lt;/p&gt;

&lt;p&gt;This doubling up leads to the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;systemd creates the log file as the root user&lt;/li&gt;
&lt;li&gt;puma which we will generally have running as a different user then tries to write to this same file, but it doesn&amp;#39;t have permission because it was created by root&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The solution to this is simple, we can complete remove this line from &lt;code&gt;puma.rb&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;stdout_redirect &amp;#39;/home/deploy/LOG_FILE_PATH/shared/log/puma_access.log&amp;#39;, true
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Since the redirection of stdout is already being handled by systemd.&lt;/p&gt;
</content>
<summary>When using the capistrano puma gem with systemd, we may get the error:Permission denied @ rb_io_reopen - /home/deploy/LOG_FILE_PATH/shared/log/puma_access.log (Errno::EACCES)This may be caused by doubling up on the puma app servers logging.Typically our systemd unit will contain something like:StandardOutput=append:/home/deploy/LOG_FILE_PATH/shared/log/puma_access.logWhich means that any data written to standard output will be appended to the log file specified by systemd.If we&amp;#39;re getting the above error, it&amp;#39;s also likely that our puma.rb configuration file contains something like:stdout_redirect &amp;#39;/home/deploy/LOG_FILE_PATH/shared/log/puma_access.log&amp;#39;, trueWhich tells puma itself to write to a log file instead of to stdout.This doubling up leads to the following:systemd creates the log file as the root userpuma which we will generally have running as a different user then tries to write to this same file, but it doesn&amp;#39;t have permission because it was created by rootThe solution to this is simple, we can complete remove this line from puma.rb:stdout_redirect &amp;#39;/home/deploy/LOG_FILE_PATH/shared/log/puma_access.log&amp;#39;, trueSince the redirection of stdout is already being handled by systemd.</summary>
</entry>
<entry>
<title>Capistrano &amp;amp; Puma; service puma is not active, cannot reload</title>
<link href="https://www.talkingquickly.co.uk/capistrano-puma-is-not-active-cannot-reload" rel="alternate" type="text/html" title="Capistrano &amp; Puma; service puma is not active, cannot reload" />
<published>2021-03-14T15:40:00+00:00</published>
<updated>2021-03-14T15:40:00+00:00</updated>
<id>https://www.talkingquickly.co.uk/capistrano-puma-service-not-active-cannot-reload</id>
<content type="html" xml:base="https://www.talkingquickly.co.uk/capistrano-puma-is-not-active-cannot-reload">&lt;p&gt;When trying to use the Capistrano Puma gem to restart Puma via systemd, we may run into an error along the lines of:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;puma_APP_NAME.service is not active, cannot reload
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This typically happens either because the service was never enabled or because in the time which elapsed between it being enabled and the first deploy taking place, it has crashed a sufficient number of times that it is no longer active.&lt;/p&gt;

&lt;p&gt;The behaviour we want in this scenario is to reload the service if it is active, otherwise to restart it.&lt;/p&gt;

&lt;p&gt;Happily systemctl [supports this out of the box]&lt;a href=&quot;https://www.freedesktop.org/software/systemd/man/systemctl.html&quot;&gt;https://www.freedesktop.org/software/systemd/man/systemctl.html&lt;/a&gt; with &lt;code&gt;systemctl reload-or-restart&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We can add the following to &lt;code&gt;lib/capistrano/tasks&lt;/code&gt; to add a task which uses this to the puma namespace provided by the capistrano puma gem:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:puma&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:systemd&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;desc&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Reload the puma service via systemd by sending USR1 (e.g. trigger a zero downtime deploy)&amp;#39;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:reload&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;roles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:puma_role&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:puma_systemctl_user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:system&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:puma_systemctl_bin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; reload-or-restart &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:puma_service_unit_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;execute&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:puma_systemctl_bin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;--user&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;reload&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:puma_service_unit_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;execute&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:loginctl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;enable-linger&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:puma_lingering_user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:puma_enable_lingering&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;after&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;deploy:finished&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;puma:systemd:reload&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This should be used in conjunction with including the puma systemd tasks in our &lt;code&gt;Capfile&lt;/code&gt; using the &lt;code&gt;load_hooks: false&lt;/code&gt; option which prevents the default restart task from being called.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;install_plugin&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Capistrano&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Puma&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Systemd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;load_hooks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The use of the above task also allows for zero downtime deploys when used with the relevant puma configuration and systemd unit file. See &lt;a href=&quot;/capistrano-puma-neither-valid-executable-nor-absolute-path&quot;&gt;this post&lt;/a&gt; for more on the systemd unit file and &lt;a href=&quot;https://github.com/TalkingQuickly/rdra_rails6_example&quot;&gt;this repository&lt;/a&gt; for a working example.&lt;/p&gt;
</content>
<summary>When trying to use the Capistrano Puma gem to restart Puma via systemd, we may run into an error along the lines of:puma_APP_NAME.service is not active, cannot reloadThis typically happens either because the service was never enabled or because in the time which elapsed between it being enabled and the first deploy taking place, it has crashed a sufficient number of times that it is no longer active.The behaviour we want in this scenario is to reload the service if it is active, otherwise to restart it.Happily systemctl [supports this out of the box]https://www.freedesktop.org/software/systemd/man/systemctl.html with systemctl reload-or-restart.We can add the following to lib/capistrano/tasks to add a task which uses this to the puma namespace provided by the capistrano puma gem:namespace :puma do  namespace :systemd do    desc &amp;#39;Reload the puma service via systemd by sending USR1 (e.g. trigger a zero downtime deploy)&amp;#39;    task :reload do      on roles(fetch(:puma_role)) do        if fetch(:puma_systemctl_user) == :system          sudo &amp;quot;#{fetch(:puma_systemctl_bin)} reload-or-restart #{fetch(:puma_service_unit_name)}&amp;quot;        else          execute &amp;quot;#{fetch(:puma_systemctl_bin)}&amp;quot;, &amp;quot;--user&amp;quot;, &amp;quot;reload&amp;quot;, fetch(:puma_service_unit_name)          execute :loginctl, &amp;quot;enable-linger&amp;quot;, fetch(:puma_lingering_user) if fetch(:puma_enable_lingering)        end      end    end  endendafter &amp;#39;deploy:finished&amp;#39;, &amp;#39;puma:systemd:reload&amp;#39;This should be used in conjunction with including the puma systemd tasks in our Capfile using the load_hooks: false option which prevents the default restart task from being called.install_plugin Capistrano::Puma::Systemd, load_hooks: falseThe use of the above task also allows for zero downtime deploys when used with the relevant puma configuration and systemd unit file. See this post for more on the systemd unit file and this repository for a working example.</summary>
</entry>
<entry>
<title>Capistrano &amp;amp; Puma; neither a valid executable name nor an absolute path</title>
<link href="https://www.talkingquickly.co.uk/capistrano-puma-neither-valid-executable-nor-absolute-path" rel="alternate" type="text/html" title="Capistrano &amp; Puma; neither a valid executable name nor an absolute path" />
<published>2021-03-14T15:40:00+00:00</published>
<updated>2021-03-14T15:40:00+00:00</updated>
<id>https://www.talkingquickly.co.uk/capistrano-puma-neither-a-valid-executable-name-nor-an-absolute-path</id>
<content type="html" xml:base="https://www.talkingquickly.co.uk/capistrano-puma-neither-valid-executable-nor-absolute-path">&lt;p&gt;When attempting to deploy a Rails application using the puma web sever using the systemd functionality in the capistrano puma gem, we may receive the error message:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;Neither a valid executable name nor an absolute path
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When attempting to start the systemd service. This most often occurs when using the capistrano rbenv plugin. This is because the Capistrano rbenv plugin modifies the &lt;code&gt;SSHKit.config.command_map[:bundle]&lt;/code&gt; path to include the &lt;code&gt;RBENV_ROOT&lt;/code&gt; and &lt;code&gt;RBENV_VERSION&lt;/code&gt; environment variables at the start of the &lt;code&gt;bundle&lt;/code&gt; path. Systemd doesn&amp;#39;t support &lt;code&gt;Exec&lt;/code&gt; command starting with environment variables, instead requiring them to be in separate &lt;code&gt;Environment&lt;/code&gt; lines.&lt;/p&gt;

&lt;p&gt;We can fix this by overriding the &lt;code&gt;puma.server.erb&lt;/code&gt; template with a new systemd unit file as follows:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;[Unit]
Description=Puma HTTP Server for &amp;lt;%= &amp;quot;#{fetch(:application)} (#{fetch(:stage)})&amp;quot; %&amp;gt;
After=network.target

[Service]
Type=simple
&amp;lt;%=&amp;quot;User=#{puma_user(@role)}&amp;quot; if fetch(:puma_systemctl_user) == :system %&amp;gt;
WorkingDirectory=&amp;lt;%= current_path %&amp;gt;
ExecStart=/usr/local/rbenv/bin/rbenv exec bundle exec puma -C &amp;lt;%= fetch(:puma_conf) %&amp;gt;
ExecReload=/bin/kill -USR1 $MAINPID
ExecStop=/bin/kill -TSTP $MAINPID
StandardOutput=append:&amp;lt;%= fetch(:puma_access_log) %&amp;gt;
StandardError=append:&amp;lt;%= fetch(:puma_error_log) %&amp;gt;
&amp;lt;%=&amp;quot;EnvironmentFile=#{fetch(:puma_service_unit_env_file)}&amp;quot; if fetch(:puma_service_unit_env_file) %&amp;gt;
&amp;lt;% fetch(:puma_service_unit_env_vars, []).each do |environment_variable| %&amp;gt;
&amp;lt;%=&amp;quot;Environment=#{environment_variable}&amp;quot; %&amp;gt;
&amp;lt;% end %&amp;gt;

Environment=RBENV_VERSION=&amp;lt;%= fetch(:rbenv_ruby) %&amp;gt;
Environment=RBENV_ROOT=/usr/local/rbenv

Restart=always
RestartSec=1

SyslogIdentifier=puma_&amp;lt;%= fetch(:application) %&amp;gt;_&amp;lt;%= fetch(:stage) %&amp;gt;

[Install]
WantedBy=&amp;lt;%=(fetch(:puma_systemctl_user) == :system) ? &amp;quot;multi-user.target&amp;quot; : &amp;quot;default.target&amp;quot;%&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note that this hardcodes the path to rbenv so if the path is different, for example because it&amp;#39;s a user install not a system install, this will need updating.&lt;/p&gt;

&lt;p&gt;This unit file also adds an &lt;code&gt;ExecReload&lt;/code&gt; option to allow us to use systemd for zero downtime deploys.&lt;/p&gt;

&lt;p&gt;For a fully working example see &lt;a href=&quot;https://github.com/TalkingQuickly/rdra_rails6_example/&quot;&gt;this repository&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There&amp;#39;s more information in &lt;a href=&quot;https://github.com/seuros/capistrano-puma/issues/313&quot;&gt;this github issue&lt;/a&gt;.&lt;/p&gt;
</content>
<summary>When attempting to deploy a Rails application using the puma web sever using the systemd functionality in the capistrano puma gem, we may receive the error message:Neither a valid executable name nor an absolute pathWhen attempting to start the systemd service. This most often occurs when using the capistrano rbenv plugin. This is because the Capistrano rbenv plugin modifies the SSHKit.config.command_map[:bundle] path to include the RBENV_ROOT and RBENV_VERSION environment variables at the start of the bundle path. Systemd doesn&amp;#39;t support Exec command starting with environment variables, instead requiring them to be in separate Environment lines.We can fix this by overriding the puma.server.erb template with a new systemd unit file as follows:[Unit]Description=Puma HTTP Server for &amp;lt;%= &amp;quot;#{fetch(:application)} (#{fetch(:stage)})&amp;quot; %&amp;gt;After=network.target[Service]Type=simple&amp;lt;%=&amp;quot;User=#{puma_user(@role)}&amp;quot; if fetch(:puma_systemctl_user) == :system %&amp;gt;WorkingDirectory=&amp;lt;%= current_path %&amp;gt;ExecStart=/usr/local/rbenv/bin/rbenv exec bundle exec puma -C &amp;lt;%= fetch(:puma_conf) %&amp;gt;ExecReload=/bin/kill -USR1 $MAINPIDExecStop=/bin/kill -TSTP $MAINPIDStandardOutput=append:&amp;lt;%= fetch(:puma_access_log) %&amp;gt;StandardError=append:&amp;lt;%= fetch(:puma_error_log) %&amp;gt;&amp;lt;%=&amp;quot;EnvironmentFile=#{fetch(:puma_service_unit_env_file)}&amp;quot; if fetch(:puma_service_unit_env_file) %&amp;gt;&amp;lt;% fetch(:puma_service_unit_env_vars, []).each do |environment_variable| %&amp;gt;&amp;lt;%=&amp;quot;Environment=#{environment_variable}&amp;quot; %&amp;gt;&amp;lt;% end %&amp;gt;Environment=RBENV_VERSION=&amp;lt;%= fetch(:rbenv_ruby) %&amp;gt;Environment=RBENV_ROOT=/usr/local/rbenvRestart=alwaysRestartSec=1SyslogIdentifier=puma_&amp;lt;%= fetch(:application) %&amp;gt;_&amp;lt;%= fetch(:stage) %&amp;gt;[Install]WantedBy=&amp;lt;%=(fetch(:puma_systemctl_user) == :system) ? &amp;quot;multi-user.target&amp;quot; : &amp;quot;default.target&amp;quot;%&amp;gt;Note that this hardcodes the path to rbenv so if the path is different, for example because it&amp;#39;s a user install not a system install, this will need updating.This unit file also adds an ExecReload option to allow us to use systemd for zero downtime deploys.For a fully working example see this repository.There&amp;#39;s more information in this github issue.</summary>
</entry>
<entry>
<title>Kubernetes Single Sign On - A detailed guide</title>
<link href="https://www.talkingquickly.co.uk/kubernetes-sso-a-detailed-guide" rel="alternate" type="text/html" title="Kubernetes Single Sign On - A detailed guide" />
<published>2021-02-25T15:40:00+00:00</published>
<updated>2021-02-25T15:40:00+00:00</updated>
<id>https://www.talkingquickly.co.uk/kubernetes-sso-a-comprehensive-guide</id>
<content type="html" xml:base="https://www.talkingquickly.co.uk/kubernetes-sso-a-detailed-guide">&lt;p&gt;In this series of posts we cover how to setup a comprehensive group based single sign on system for Kubernetes including the &lt;code&gt;kubectl&lt;/code&gt; cli, any web application with ingress, a docker registry and gitea. We&amp;#39;ll cover most of the common SSO models so adapting what&amp;#39;s here to other applications such as Gitlab, Kibana, Grafana etc is simple.&lt;/p&gt;

&lt;p&gt;The full solution uses Keycloak backed by OpenLDAP. OpenLDAP is required for the Gitea component, but can be skipped for the other components, including OIDC based SSO for &lt;code&gt;kubectl&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Some of the highlights this series covers are:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Login to the &lt;code&gt;kubectl&lt;/code&gt; cli using SSO credentials via the browser&lt;/li&gt;
&lt;li&gt;Replace basic auth ingress annotations with equally simple but much more secure SSO annotations&lt;/li&gt;
&lt;li&gt;Push and pull to a secure private docker registry with full ACL&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;{% include kubernetes-sso/contents.html active=&amp;quot;contents&amp;quot; %}&lt;/p&gt;

&lt;p&gt;Finally there were a lot of excellent resources I leant on when creating this series, there&amp;#39;s a summary of the key ones &lt;a href=&quot;/kubernetes-sso-links&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
</content>
<summary>In this series of posts we cover how to setup a comprehensive group based single sign on system for Kubernetes including the kubectl cli, any web application with ingress, a docker registry and gitea. We&amp;#39;ll cover most of the common SSO models so adapting what&amp;#39;s here to other applications such as Gitlab, Kibana, Grafana etc is simple.The full solution uses Keycloak backed by OpenLDAP. OpenLDAP is required for the Gitea component, but can be skipped for the other components, including OIDC based SSO for kubectl.Some of the highlights this series covers are:Login to the kubectl cli using SSO credentials via the browserReplace basic auth ingress annotations with equally simple but much more secure SSO annotationsPush and pull to a secure private docker registry with full ACL        Contents and overview          Installing OpenLDAP          Installing Keycloak          Linking Keycloak and OpenLDAP          OIDC Kubectl Login with Keycloak          Authenticate any web app using ingress annotations          Gitea (requires LDAP)          Simple Docker Registry          Harbor Docker Registry with ACL  Finally there were a lot of excellent resources I leant on when creating this series, there&amp;#39;s a summary of the key ones here.</summary>
</entry>
<entry>
<title>OIDC Login to Kubernetes and Kubectl with Keycloak</title>
<link href="https://www.talkingquickly.co.uk/setting-up-oidc-login-kubernetes-kubectl-with-keycloak" rel="alternate" type="text/html" title="OIDC Login to Kubernetes and Kubectl with Keycloak" />
<published>2021-02-23T15:40:00+00:00</published>
<updated>2021-02-23T15:40:00+00:00</updated>
<id>https://www.talkingquickly.co.uk/oidc-login-to-kubernetes-and-kubectl-with-keycloak</id>
<content type="html" xml:base="https://www.talkingquickly.co.uk/setting-up-oidc-login-kubernetes-kubectl-with-keycloak">&lt;p&gt;A commonly cited pain point for teams working with Kubernetes clusters is managing the configuration to connect to the cluster. All to often this ends up being either sending KUBECONFIG files with hardcoded credentials back and forth or fragile custom shell scripts wrapping the AWS or GCP cli&amp;#39;s.&lt;/p&gt;

&lt;p&gt;In this post we&amp;#39;ll integrate Kubernetes with Keycloak so that when we execute a &lt;code&gt;kubectl&lt;/code&gt; or &lt;code&gt;helm&lt;/code&gt; command, if the user is not already authenticated, they&amp;#39;ll be presented with a keycloak browser login where they can enter their credentials. No more sharing KUBECONFIG files and forgetting to export different KUBECONFIG paths!&lt;/p&gt;

&lt;p&gt;We&amp;#39;ll also configure group based access control, so we can, for example create a &lt;code&gt;KubernetesAdminstrators&lt;/code&gt; group, and have all users in that group given &lt;code&gt;cluster-admin&lt;/code&gt; access automatically.&lt;/p&gt;

&lt;p&gt;When we remove a user from Keycloak (or remove them from the relevant groups within Keycloak) they will then lose access to the cluster (subject to token expiry).&lt;/p&gt;

&lt;p&gt;For this we&amp;#39;ll be using OpenID Connect, more &lt;a href=&quot;https://kubernetes.io/docs/reference/access-authn-authz/authentication/#openid-connect-tokens&quot;&gt;here&lt;/a&gt; on how this works.&lt;/p&gt;

&lt;p&gt;By default, configuring Kubernetes to support OIDC auth requires passing flags to the kubelet API server. The challenge with this approach is that only one such provider can be configured and managed Kubernetes offerings - e.g. GCP or AWS - use this for their proprietary IAM systems.&lt;/p&gt;

&lt;p&gt;To address this we will use &lt;a href=&quot;https://github.com/jetstack/kube-oidc-proxy&quot;&gt;kube-oidc-proxy&lt;/a&gt;, a tool from Jetstack which allows us to connect to a proxy server which will manage OIDC authentication and use impersonation to give the authenticating user the required permissions. This approach has the benefit of being universal across clusters, so we don&amp;#39;t have to follow different approaches for our managed vs unmanaged clusters.&lt;/p&gt;

&lt;p&gt;This post is part of a series on single sign on for Kubernetes.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;{% include kubernetes-sso/contents.html active=&amp;quot;kubernetesoidc&amp;quot; %}&lt;/p&gt;

&lt;p&gt;{% include kubernetes-sso/pre-reqs.html %}&lt;/p&gt;

&lt;p&gt;This also assumes you&amp;#39;ve already followed the Installing Keycloak section and have a functioning Keycloak instance you can login to with administrator rights.&lt;/p&gt;

&lt;h2&gt;Setting up Keycloak&lt;/h2&gt;

&lt;p&gt;First we&amp;#39;ll create a new client in Keycloak with Client ID: &lt;code&gt;kube-oidc-proxy&lt;/code&gt; and client protocol: &lt;code&gt;openid-connect&lt;/code&gt;. We&amp;#39;ll then configure the following parameters for this client:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Access Type&lt;/strong&gt;: &lt;code&gt;confidential&lt;/code&gt;, this is required for a client secret to be generated&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Valid Redirect URLs&lt;/strong&gt;: &lt;code&gt;http://localhost:8000&lt;/code&gt; and &lt;code&gt;http://localhost:18000&lt;/code&gt;. This is used by &lt;a href=&quot;https://github.com/int128/kubelogin&quot;&gt;kubelogin&lt;/a&gt; as a callback when we login with &lt;code&gt;kubectl&lt;/code&gt; so a browser window can be opened for us to authenticate with keycloak.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We can then save this new client and a new &amp;quot;Credentials&amp;quot; tab will appear. We&amp;#39;ll need the generated client secret along with our client id (&lt;code&gt;kube-oidc-proxy&lt;/code&gt;) for later steps.&lt;/p&gt;

&lt;h2&gt;Setting up Kube OIDC Proxy&lt;/h2&gt;

&lt;p&gt;Having created the client, we can now create our configuration for &lt;code&gt;kube-oidc-proxy&lt;/code&gt;. A sample configuration can be found in &lt;code&gt;kube-oidc-proxy/values-kube-oidc.yml&lt;/code&gt; and looks like this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;oidc&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;clientId&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;kube-oidc-proxy&lt;/span&gt;
  &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;issuerUrl&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;https://sso.ssotest.staging.talkingquickly.co.uk/auth/realms/master&lt;/span&gt;
  &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;usernameClaim&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;sub&lt;/span&gt;

&lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;extraArgs&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;10&lt;/span&gt;

&lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;ingress&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;enabled&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;true&lt;/span&gt;
  &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;annotations&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;cert-manager.io/cluster-issuer&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;letsencrypt-production&lt;/span&gt;
    &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;nginx.ingress.kubernetes.io/backend-protocol&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;HTTPS&lt;/span&gt;
  &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;hosts&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;p p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;kube.ssotest.staging.talkingquickly.co.uk&lt;/span&gt;
      &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;paths&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;p p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;/&lt;/span&gt;
  &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;tls&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;p p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;secretName&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;oidc-proxy-tls&lt;/span&gt;
      &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;hosts&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;p p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;kube.ssotest.staging.talkingquickly.co.uk&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The important things to customise here are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;issuerUrl&lt;/code&gt;, this is the URL of our keycloak instance, including the realm (in this case we&amp;#39;re using the default master realm)&lt;/li&gt;
&lt;li&gt;The hostnames within the ingress definition. This URL will be a second Kubernetes API URL, so once our SSO login is setup, our kubeconfig files will point at this URL instead of the default cluster endpoint&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;code&gt;extraArgs&lt;/code&gt; &lt;code&gt;v: 10&lt;/code&gt; sets &lt;code&gt;kube-oidc-proxy&lt;/code&gt; to output verbose logging methods which is useful for debugging issues. In production this line can be removed.&lt;/p&gt;

&lt;p&gt;We can then install &lt;code&gt;kube-oidc-proxy&lt;/code&gt; with:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;helm upgrade --install kube-oidc-proxy ./charts/kube-oidc-proxy --values kube-oidc-proxy/values-kube-oidc.yml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With &lt;code&gt;kube-oidc-proxy&lt;/code&gt; up and running, we can now configure &lt;code&gt;kubectl&lt;/code&gt; to use it. The simplest way to do this is with a &lt;code&gt;kubectl&lt;/code&gt; plugin called &lt;a href=&quot;https://github.com/int128/kubelogin&quot;&gt;kubelogin&lt;/a&gt;. With this plugin installed, when you execute a &lt;code&gt;kubectl&lt;/code&gt; command, it will open a browser window for the user to login via Keycloak. It will then handle refreshing tokens and subsequently re-authorising if the session expires.&lt;/p&gt;

&lt;p&gt;Installation instructions for &lt;code&gt;kubelogin&lt;/code&gt; are &lt;a href=&quot;https://github.com/int128/kubelogin&quot;&gt;here&lt;/a&gt;, if you use homebrew, it&amp;#39;s as simple as &lt;code&gt;brew install int128/kubelogin/kubelogin&lt;/code&gt;, otherwise I recommend &lt;a href=&quot;https://krew.sigs.k8s.io/docs/user-guide/setup/install/&quot;&gt;installing krew&lt;/a&gt; to manage &lt;code&gt;kubectl&lt;/code&gt; plugins which will then allow you to install the plugin with &lt;code&gt;kubectl krew install oidc-login&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We&amp;#39;ll then want to create a &lt;code&gt;kubeconfig.yml&lt;/code&gt; file with the following contents (there&amp;#39;s an example in &lt;code&gt;kubelogin/kuebconfig.yml&lt;/code&gt;):&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;v1&lt;/span&gt;
&lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;clusters&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;p p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;cluster&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;https://kube.ssotest.staging.talkingquickly.co.uk&lt;/span&gt;
  &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;default&lt;/span&gt;
&lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;contexts&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;p p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;cluster&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;default&lt;/span&gt;
    &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;namespace&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;identity&lt;/span&gt;
    &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;oidc&lt;/span&gt;
  &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;default&lt;/span&gt;
&lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;current-context&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;default&lt;/span&gt;
&lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;Config&lt;/span&gt;
&lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;preferences&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p p-Indicator&quot;&gt;{}&lt;/span&gt;
&lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;p p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;oidc&lt;/span&gt;
  &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;exec&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;client.authentication.k8s.io/v1beta1&lt;/span&gt;
      &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;p p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;oidc-login&lt;/span&gt;
      &lt;span class=&quot;p p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;get-token&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# - -v1&lt;/span&gt;
      &lt;span class=&quot;p p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;--oidc-issuer-url=https://sso.ssotest.staging.talkingquickly.co.uk/auth/realms/master&lt;/span&gt;
      &lt;span class=&quot;p p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;--oidc-client-id=kube-oidc-proxy&lt;/span&gt;
      &lt;span class=&quot;p p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;--oidc-client-secret=a32807bc-4b5d-40b7-8391-91bb2b80fd30&lt;/span&gt;
      &lt;span class=&quot;p p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;--oidc-extra-scope=email&lt;/span&gt;
      &lt;span class=&quot;p p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;--grant-type=authcode&lt;/span&gt;
      &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;kubectl&lt;/span&gt;
      &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;null&lt;/span&gt;
      &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;provideClusterInfo&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Replacing:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;server&lt;/code&gt; url the ingress url we chose for &lt;code&gt;kube-oidc-proxy&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;oidc-issuer-url&lt;/code&gt; with the same keycloak url we used in the &lt;code&gt;kube-oidc-proxy&lt;/code&gt; configuration&lt;/li&gt;
&lt;li&gt;The value of &lt;code&gt;oidc-client-secret&lt;/code&gt; with the secret key we extracted from the credentials tab of the client in Keycloak&lt;/li&gt;
&lt;li&gt;Optionally uncommenting the &lt;code&gt;-v1&lt;/code&gt; line if you want to see verbose logging output&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We can then execute &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;export KUBECONFIG=./kubelogin/kubeconfig.yml
kubectl get pods  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Managing your kubeconfig files is beyond the scope of this tutorial but if you aren&amp;#39;t already I strongly recommend some combination of &lt;a href=&quot;https://direnv.net&quot;&gt;direnv&lt;/a&gt; and &lt;a href=&quot;https://github.com/ahmetb/kubectx&quot;&gt;kubectx&lt;/a&gt;. Both my &lt;a href=&quot;/2021/01/debian-dev-environment-for-remote-vscode/&quot;&gt;Debian Remote Dev Env Environment&lt;/a&gt; and &lt;a href=&quot;/2021/01/macos-setup-with-ansible/&quot;&gt;OSX Setup&lt;/a&gt; provide these tools out of the box.&lt;/p&gt;

&lt;p&gt;It&amp;#39;s important to note that the &lt;code&gt;export KUBECONFIG=./kubelogin/kubeconfig.yml&lt;/code&gt; is local to an individual terminal session, so if you switch to a new terminal tab or close and re-open your terminal, it will be gone and you&amp;#39;ll fallback to using whichever &lt;code&gt;KUBECONFIG&lt;/code&gt; envrironment variable your shell is set to use by default.&lt;/p&gt;

&lt;p&gt;When we execute the above we&amp;#39;ll be sent out to a browser to login via Keycloak and once completed we&amp;#39;ll be logged in.&lt;/p&gt;

&lt;p&gt;We will however see an error along the lines of:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;Error from server (Forbidden): pods is forbidden: User &amp;quot;oidcuser:7d7c2183-3d96-496a-9516-dda7538854c9&amp;quot; cannot list resource &amp;quot;pods&amp;quot; in API group &amp;quot;&amp;quot; in the namespace &amp;quot;identity&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Although our user is authenticated, e.g. Kubernetes knows that the current user is &lt;code&gt;oidcuser:7d7c2183-3d96-496a-9516-dda7538854c9&lt;/code&gt;, this user is currently not authorised to do anything.&lt;/p&gt;

&lt;p&gt;We can fix this by creating a cluster role binding which binds our user to the &lt;code&gt;cluster-admin&lt;/code&gt; role which is the &amp;quot;superuser&amp;quot; role on Kubernetes.&lt;/p&gt;

&lt;p&gt;We&amp;#39;ll need to execute this in a separate temrinal, e.g. one in which we have not run &lt;code&gt;export KUBECONFIG=./kubelogin/kubeconfig.yml&lt;/code&gt; and so &lt;code&gt;KUBECONFIG&lt;/code&gt; is still pointing at a kubeconfig file which gives us &lt;code&gt;cluster-admin&lt;/code&gt; access to the cluster.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;kubectl create clusterrolebinding oidc-cluster-admin --clusterrole=cluster-admin --user=&amp;#39;oidcuser:OUR_USER_ID&amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Replacing OUR&lt;em&gt;USER&lt;/em&gt;ID with our login users id from Keycloak (or from the error message above).&lt;/p&gt;

&lt;p&gt;Note the &lt;code&gt;oidcuser:&lt;/code&gt; prefix which is added due to the &lt;code&gt;usernamePrefix: &amp;quot;oidcuser:&amp;quot;&lt;/code&gt; prefix configuration line in our Kube OIDC Proxy values file. This prevents users defined in Keycloak from conflicting with any kubernetes internal users.&lt;/p&gt;

&lt;h2&gt;Keycloak login to kubernetes with groups&lt;/h2&gt;

&lt;p&gt;The above setup allows us to use &lt;code&gt;kubectl&lt;/code&gt; while authenticating with our keycloak user. However for each user we have to create an individual cluster role binding assigning them permissions. This is manual and becomes painful for anything beyond a small handful of users.&lt;/p&gt;

&lt;p&gt;The solution to this lies in groups, we&amp;#39;ll configure our kubernetes oidc implementation to be aware of Keycloak groups. We can then create a &lt;code&gt;KubernetesAdmin&lt;/code&gt; group in Keycloak and have all users in this group given &lt;code&gt;cluster-admin&lt;/code&gt; permissions automatically using a single ClusterRoleBinding.&lt;/p&gt;

&lt;p&gt;Begin by creating a &lt;code&gt;KubernetesAdmins&lt;/code&gt; group in Keycloak and then creating a new user and adding them to this group. &lt;/p&gt;

&lt;p&gt;We then need to update our Keycloak client to include the groups the user is a member of as part of the JWT.&lt;/p&gt;

&lt;p&gt;We do this by going back to our &lt;code&gt;kube-oidc-client&lt;/code&gt; entry under Keycloak clients and choosing the mappers tab then &amp;quot;Create&amp;quot;.&lt;/p&gt;

&lt;p&gt;We then enter the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Name&lt;/strong&gt;: &lt;code&gt;Groups&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Mapper Type&lt;/strong&gt;: &lt;code&gt;Group Membership&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Full Group Path&lt;/strong&gt;: &lt;code&gt;Off&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And then choosing save.&lt;/p&gt;

&lt;p&gt;If we uncomment the &lt;code&gt;# - -v1&lt;/code&gt; line in our &lt;code&gt;kubelogin/kubeconfig.yml&lt;/code&gt; file, remove the contents of &lt;code&gt;~/.kube/cache/oidc-login/&lt;/code&gt; and then execute a &lt;code&gt;kubectl&lt;/code&gt; command e.g. &lt;code&gt;kubectl get pods&lt;/code&gt; then we&amp;#39;ll be asked to login and again and then we&amp;#39;ll see that the decoded JWT now contains our groups, e.g:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;err&quot;&gt;...&lt;/span&gt;                                         
  &lt;span class=&quot;nt&quot;&gt;&amp;quot;groups&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;                                                       
    &lt;span class=&quot;s2&quot;&gt;&amp;quot;DockerRegistry&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;                                             
    &lt;span class=&quot;s2&quot;&gt;&amp;quot;Administrators&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&amp;quot;KubernetesAdmins&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;             
  &lt;span class=&quot;err&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We can then create cluster role binding to give anyone with the &lt;code&gt;KubernetesAdmin&lt;/code&gt; group, &lt;code&gt;cluster-admin&lt;/code&gt; access. Our cluster role binding looks like this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;rbac.authorization.k8s.io/v1&lt;/span&gt;
&lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;ClusterRoleBinding&lt;/span&gt;
&lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;oidc-admin-group&lt;/span&gt;
&lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;roleRef&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;apiGroup&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;rbac.authorization.k8s.io&lt;/span&gt;
  &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;ClusterRole&lt;/span&gt;
  &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;cluster-admin&lt;/span&gt;
&lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;subjects&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;p p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;apiGroup&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;rbac.authorization.k8s.io&lt;/span&gt;
  &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;Group&lt;/span&gt;
  &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;oidcgroup:KubernetesAdmins&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note that &lt;code&gt;oidcgroup&lt;/code&gt; which is added due to the &lt;code&gt;groupsPrefix: &amp;quot;oidcgroup:&amp;quot;&lt;/code&gt; in our Kube OIDC Proxy values configuration. This prevents keycloak groups from colliding with in-built kubernetes groups.&lt;/p&gt;

&lt;p&gt;We can apply the above with:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;kubectl apply -f ./group-auth/cluster-role-binding.yml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And then delete our user specific cluster role binding with:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;kubectl delete clusterrolebinding oidc-cluster-admin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We can confirm that our groups login works with a simple &lt;code&gt;kubectl get pods&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We can take this further by creating more restrictive cluster roles (or using more of the in-built ones) to do things like creating users that only have access to certain namespaces within our cluster.&lt;/p&gt;

&lt;p&gt;{% include kubernetes-sso/contents.html active=&amp;quot;kubernetesoidc&amp;quot; %}&lt;/p&gt;
</content>
<summary>A commonly cited pain point for teams working with Kubernetes clusters is managing the configuration to connect to the cluster. All to often this ends up being either sending KUBECONFIG files with hardcoded credentials back and forth or fragile custom shell scripts wrapping the AWS or GCP cli&amp;#39;s.In this post we&amp;#39;ll integrate Kubernetes with Keycloak so that when we execute a kubectl or helm command, if the user is not already authenticated, they&amp;#39;ll be presented with a keycloak browser login where they can enter their credentials. No more sharing KUBECONFIG files and forgetting to export different KUBECONFIG paths!We&amp;#39;ll also configure group based access control, so we can, for example create a KubernetesAdminstrators group, and have all users in that group given cluster-admin access automatically.When we remove a user from Keycloak (or remove them from the relevant groups within Keycloak) they will then lose access to the cluster (subject to token expiry).For this we&amp;#39;ll be using OpenID Connect, more here on how this works.By default, configuring Kubernetes to support OIDC auth requires passing flags to the kubelet API server. The challenge with this approach is that only one such provider can be configured and managed Kubernetes offerings - e.g. GCP or AWS - use this for their proprietary IAM systems.To address this we will use kube-oidc-proxy, a tool from Jetstack which allows us to connect to a proxy server which will manage OIDC authentication and use impersonation to give the authenticating user the required permissions. This approach has the benefit of being universal across clusters, so we don&amp;#39;t have to follow different approaches for our managed vs unmanaged clusters.This post is part of a series on single sign on for Kubernetes.</summary>
</entry>
<entry>
<title>Web application authentication and authorization with Keycloak and OAuth2 Proxy on Kubernetes using Nginx Ingress</title>
<link href="https://www.talkingquickly.co.uk/webapp-authentication-keycloak-OAuth2-proxy-nginx-ingress-kubernetes" rel="alternate" type="text/html" title="Web application authentication and authorization with Keycloak and OAuth2 Proxy on Kubernetes using Nginx Ingress" />
<published>2021-02-21T15:40:00+00:00</published>
<updated>2021-02-21T15:40:00+00:00</updated>
<id>https://www.talkingquickly.co.uk/web-application-authentication-with-nginx-keycloak-oauth2-proxy</id>
<content type="html" xml:base="https://www.talkingquickly.co.uk/webapp-authentication-keycloak-OAuth2-proxy-nginx-ingress-kubernetes">&lt;p&gt;In this post we&amp;#39;ll setup a generic solution which allows us to add authentication via Keycloak to any application, simply by adding an ingress annotation. This gives us a much more extendable and secure alternative to basic auth.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Many third party applications we run on Kubernetes will already support either OIDC or LDAP based login. Some however will not. In addition we may wish to deploy our own applications and use Keycloak to manage access to them without going through the work of adding OIDC or LDAP integration to them.&lt;/p&gt;

&lt;p&gt;We&amp;#39;ll use OAuth2 Proxy to add authentication to a simple nginx container.&lt;/p&gt;

&lt;p&gt;We&amp;#39;ll then look at how the application being authenticated can access and decode the Keycloak JSON Web Token and use this for things like group based authorization.&lt;/p&gt;

&lt;p&gt;In it&amp;#39;s simplest form, this would allow us to protect internal admin applications. In a more complete setup, we could setup a &amp;quot;customers&amp;quot; realm within Keycloak and delegate all of our authentication and authorization to Keycloak.&lt;/p&gt;

&lt;p&gt;For this we&amp;#39;ll be using &lt;a href=&quot;https://github.com/oauth2-proxy/oauth2-proxy&quot;&gt;OAuth2 Proxy&lt;/a&gt; which is the &lt;a href=&quot;https://www.keycloak.org/2020/08/sunsetting-louketo-project.adoc&quot;&gt;suggested replacement&lt;/a&gt; for Keycloaks Gatekeeper / Louketo project which reached EOL in August 2020.&lt;/p&gt;

&lt;p&gt;{% include kubernetes-sso/contents.html active=&amp;quot;webapps&amp;quot; %}&lt;/p&gt;

&lt;p&gt;{% include kubernetes-sso/pre-reqs.html %}&lt;/p&gt;

&lt;p&gt;This post assumes you&amp;#39;ve completed the &amp;quot;Installing Keycloak&amp;quot; section and have a working Keycloak installation.&lt;/p&gt;

&lt;h2&gt;Keycloak authentication for an Nginx server&lt;/h2&gt;

&lt;p&gt;First we&amp;#39;ll configure OAuth2 Proxy to work with our Keycloak installation and deploy it using a helm chart. &lt;/p&gt;

&lt;p&gt;Then we&amp;#39;ll deploy the &lt;a href=&quot;https://hub.docker.com/_/nginx&quot;&gt;official Nginx container&lt;/a&gt; image using a helm chart as an example application and then we&amp;#39;ll restrict access to it via Keycloak using ingress annotations.&lt;/p&gt;

&lt;p&gt;We&amp;#39;ll then look at how the app we&amp;#39;re authenticating can access information about the logged in user and how this information could be used to implement more fine-grained access control.&lt;/p&gt;

&lt;h2&gt;How it works&lt;/h2&gt;

&lt;p&gt;Nginx supports authentication &lt;a href=&quot;https://docs.nginx.com/nginx/admin-guide/security-controls/configuring-subrequest-authentication/&quot;&gt;based on the result of a sub-request&lt;/a&gt;. This means that when a request comes in for a protected page, it will make a sub-request to an additional URL, if that URL returns any 2xx response code then the request will be allowed, if it returns a 401 or 403 it will be denied.&lt;/p&gt;

&lt;p&gt;In practice we don&amp;#39;t need a deep understanding of the above because OAuth2 Proxy links with keycloak on one side for the actual authentication and provides suitable endpoints for the NGinx to use to check whether a user is authenticated or not.&lt;/p&gt;

&lt;p&gt;So we simple need to configure OAuth2 Proxy and then add suitable ingress annotations to the service we want to protect.&lt;/p&gt;

&lt;h2&gt;Configuring OAuth2 Proxy&lt;/h2&gt;

&lt;p&gt;First we&amp;#39;ll need to create a client application with Keycloak. Crate a new OpenID Connection application and set:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Client ID&lt;/strong&gt;: &lt;code&gt;oauth2-proxy&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Access Type&lt;/strong&gt;: &lt;code&gt;confidential&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Valid Redirect URLs&lt;/strong&gt;:: &lt;code&gt;https://oauth.ssotest.staging.talkingquickly.co.uk/oauth2/callback&lt;/code&gt; replacing &lt;code&gt;oauth.ssotest.staging.talkingquickly.co.uk&lt;/code&gt; with the subdomain you plan to install OAuth2 Proxy on&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You&amp;#39;ll then need to save the entry and go to the newly available &amp;quot;Credentials&amp;quot; tab and make a note of the &amp;quot;Secret&amp;quot;.&lt;/p&gt;

&lt;p&gt;Finally we go to the &amp;quot;Mappers&amp;quot; tab, choose &amp;quot;Create&amp;quot; and select:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Name&lt;/strong&gt;: &lt;code&gt;Groups&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Mapper Type&lt;/strong&gt;: &lt;code&gt;Group Membership&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Token Claim Name&lt;/strong&gt;: &lt;code&gt;groups&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;All other options &amp;quot;On&amp;quot;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And then choose save. This ensures that the groups the user is a member of are passed back to OAuth2 Proxy and subsequently to the application itself.&lt;/p&gt;

&lt;p&gt;While OAuth2 Proxy does have a &amp;quot;Keycloak&amp;quot; provider, we&amp;#39;re going to use the generic OIDC provider. This is both a more general solution and allows for some additional functionality which is missing the the Keycloak provider, in particular automatic cookie refresh. There is an ongoing discussion within the OAuth2 Proxy team about modifying the Keycloak provider to use the OIDC provider.&lt;/p&gt;

&lt;p&gt;We can then create our configuration for OAuth2 Proxy, an example is included in &lt;code&gt;oauth2-proxy/values-oauth2-proxy.yml&lt;/code&gt; and looks like this:&lt;/p&gt;

&lt;p&gt;@TODO update for OIDC provider 
@TODO update for buffer sizes&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# Oauth client configuration specifics&lt;/span&gt;
&lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;clientID&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;oauth2-proxy&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;clientSecret&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;YOUR_SECRET&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# Create a new secret with the following command&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# openssl rand -base64 32 | head -c 32 | base64&lt;/span&gt;
  &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;cookieSecret&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;YOUR_COOKIE_SECRET&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;configFile&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p p-Indicator&quot;&gt;|-&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;provider = &amp;quot;oidc&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;provider_display_name = &amp;quot;Keycloak&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;oidc_issuer_url = &amp;quot;YOUR_ISSUER&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;email_domains = [ &amp;quot;*&amp;quot; ]&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;scope = &amp;quot;openid profile email&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;cookie_domain = &amp;quot;.ssotest.staging.talkingquickly.co.uk&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;whitelist_domains = &amp;quot;.ssotest.staging.talkingquickly.co.uk&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;pass_authorization_header = true&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;pass_access_token = true&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;pass_user_headers = true&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;set_authorization_header = true&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;set_xauthrequest = true&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;cookie_refresh = &amp;quot;1m&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;cookie_expire = &amp;quot;30m&amp;quot;&lt;/span&gt;

&lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;ingress&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;enabled&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;true&lt;/span&gt;
  &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;/&lt;/span&gt;
  &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;hosts&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;p p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;oauth.ssotest.staging.talkingquickly.co.uk&lt;/span&gt;
  &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;annotations&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;cert-manager.io/cluster-issuer&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;letsencrypt-production&lt;/span&gt;
    &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;nginx.ingress.kubernetes.io/proxy-buffer-size&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;16k&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;tls&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;p p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;secretName&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;oauth-proxy-tls&lt;/span&gt;
      &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;hosts&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;p p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;oauth.ssotest.staging.talkingquickly.co.uk&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The key fields to update with your own values are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;clientSecret&lt;/strong&gt;: This is the client secret noted down from the Keycloak credentials page&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;cookieSecret&lt;/strong&gt;: This can be randomly generated with: &lt;code&gt;openssl rand -base64 32 | head -c 32 | base64&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;login&lt;em&gt;url, redeem&lt;/em&gt;url, validate_url&lt;/strong&gt;: which should be updated to match the relevant 
URL&amp;#39;s for your Keycloak installation and realm (in the example above I&amp;#39;m using the master realm)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;cookie&lt;em&gt;domain, whitelist&lt;/em&gt;domain&lt;/strong&gt;: which should be updated to match the base URL you&amp;#39;re deploying services on. E.g. in this example configuration I have &lt;code&gt;sso.ssotest.staging.talkingquickly.co.uk&lt;/code&gt;, &lt;code&gt;someapp.ssotest.staging.talkingquickly.co.uk&lt;/code&gt;, &lt;code&gt;oauth.ssotest.staging.talkingquickly.co.uk&lt;/code&gt; etc and so my base domain would be &lt;code&gt;.ssotest.staging.talkingquickly.co.uk&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ingress hosts&lt;/strong&gt;: These should be set the subdomain you wish to deploy OAuth2 Proxy to&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Setting the &lt;code&gt;cookie_domain&lt;/code&gt; and &lt;code&gt;whitelist_domain&lt;/code&gt; is important because by default, OAuth2 Proxy is configured to work only with the subdomain it is deployed on. So cookies will be specific to that subdomain and redirects will only be allowed to that subdomain.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;scope = &amp;quot;openid profile email&amp;quot;&lt;/code&gt; line is important because by default, OAuth2 Proxy will request a scope called &lt;code&gt;api&lt;/code&gt; which does not exist in Keycloak which will result in a 403 Invalid Scopes erorr.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;set_authorization_header&lt;/code&gt; line ensures that the JWT is passed back to the NGinx ingress, this is important because it allows us to then pass this header back to the authenticating application so that it can access more information about the logged in user.&lt;/p&gt;

&lt;p&gt;Finally the &lt;code&gt;nginx.ingress.kubernetes.io/proxy-buffer-size: &amp;quot;16k&amp;quot;&lt;/code&gt; avoids an issue where the large headers which are often passed around with OAuth requests don&amp;#39;t exceed the buffer size in NGinx which leads to errors along the lines of &amp;quot;Cookie &amp;quot;&lt;em&gt;oauth2&lt;/em&gt;proxy&amp;quot; not present&amp;quot; and &amp;quot;upstream sent too big header while reading response header from upstream&amp;quot;.&lt;/p&gt;

&lt;h2&gt;Installing OAuth2 Proxy&lt;/h2&gt;

&lt;p&gt;While we wait for the &lt;code&gt;OAuth2 Proxy&lt;/code&gt; chart to get a new home following the deprecation of the old helm stable repository, the most recent version is mirrored in the example code for this tutorial, so we can install OAuth 2 Proxy with:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;helm upgrade --install oauth2-proxy ./charts/oauth2-proxy --values oauth2-proxy/values-oauth2-proxy.yml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We can then go the ingress domain that we selected for OAuth2 Proxy and we will see a &amp;quot;Sign in with Keycloak&amp;quot; option.&lt;/p&gt;

&lt;p&gt;Note that if we are still signed in as the admin user (rather than as a regular user in the realm we configured OAuth2 Proxy with, then we will see something along the lines of 403 Permission Denied, Invalid Account. Incognito / private browsing windows are useful for avoiding this.&lt;/p&gt;

&lt;p&gt;Once we&amp;#39;ve successfully logged in with Keycloak, we&amp;#39;ll simply be re-directed to a 404 page not found error because at the moment, there is nothing to authenticate. In practice we won&amp;#39;t ever go to this URL directly, instead the authentication flow will be triggered automatically by visiting a protected application. So visiting this URL and logging in like this is purely to show that it works.&lt;/p&gt;

&lt;h2&gt;Putting an application behind auth&lt;/h2&gt;

&lt;p&gt;Now that we&amp;#39;ve setup OAuth2 Proxy, we can install an example application and add annotations to the ingress definition to have it protected behind the auth.&lt;/p&gt;

&lt;p&gt;In this example we&amp;#39;re going to simply install an instance of NGINX which serves up the default &amp;quot;Welcome to nginx!&amp;quot; page but require that users login with Keycloak before they can access it. Note that this is completely separate to the &lt;a href=&quot;https://kubernetes.github.io/ingress-nginx/&quot;&gt;NGINX Ingress&lt;/a&gt; that we&amp;#39;re using for Kubernetes.&lt;/p&gt;

&lt;p&gt;We&amp;#39;re going to be using the bitnami nginx helm chart for this so first we&amp;#39;ll need to add the repo with:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;helm repo add bitnami https://charts.bitnami.com/bitnami
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We then configure our NGINX demo application along the lines of:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;serverBlock&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p p-Indicator&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;log_format    withauthheaders &amp;#39;$remote_addr - $remote_user [$time_local] &amp;#39;&lt;/span&gt;
                    &lt;span class=&quot;no&quot;&gt;&amp;#39;&amp;quot;$request&amp;quot; $status  $body_bytes_sent &amp;quot;$http_referer&amp;quot; &amp;#39;&lt;/span&gt;
                    &lt;span class=&quot;no&quot;&gt;&amp;#39;&amp;quot;$http_user_agent&amp;quot; &amp;quot;$http_x_forwarded_for&amp;quot; &amp;quot;$http_x_auth_request_access_token&amp;quot;&amp;#39;;&lt;/span&gt;

    &lt;span class=&quot;no&quot;&gt;add_header    x-auth-request-access-token &amp;quot;$http_x_auth_request_access_token&amp;quot;;&lt;/span&gt;

  &lt;span class=&quot;no&quot;&gt;# HTTP Server&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;server {&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;# Port to listen on, can also be set in IP:PORT format&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;listen  8080;&lt;/span&gt;

      &lt;span class=&quot;no&quot;&gt;include  &amp;quot;/opt/bitnami/nginx/conf/bitnami/*.conf&amp;quot;;&lt;/span&gt;

      &lt;span class=&quot;no&quot;&gt;location /status {&lt;/span&gt;
          &lt;span class=&quot;no&quot;&gt;stub_status on;&lt;/span&gt;
          &lt;span class=&quot;no&quot;&gt;access_log   off;&lt;/span&gt;
          &lt;span class=&quot;no&quot;&gt;allow 127.0.0.1;&lt;/span&gt;
          &lt;span class=&quot;no&quot;&gt;deny all;&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;}&lt;/span&gt;

      &lt;span class=&quot;no&quot;&gt;access_log /dev/stdout withauthheaders;&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;ingress&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;enabled&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;true&lt;/span&gt;
  &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;hostname&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;nginx-demo-app2.ssotest.staging.talkingquickly.co.uk&lt;/span&gt;
  &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;tls&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;true&lt;/span&gt;
  &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;annotations&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;cert-manager.io/cluster-issuer&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;letsencrypt-staging&lt;/span&gt;
    &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;nginx.ingress.kubernetes.io/auth-url&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;https://oauth.ssotest.staging.talkingquickly.co.uk/oauth2/auth&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;nginx.ingress.kubernetes.io/auth-signin&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;https://oauth.ssotest.staging.talkingquickly.co.uk/oauth2/start?rd=$scheme://$best_http_host$request_uri&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;nginx.ingress.kubernetes.io/auth-response-headers&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;x-auth-request-user,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;x-auth-request-email,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;x-auth-request-access-token&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;acme.cert-manager.io/http01-edit-in-place&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;true&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;nginx.ingress.kubernetes.io/proxy-buffer-size&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;16k&amp;quot;&lt;/span&gt;

&lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;ClusterIP&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The custom &lt;code&gt;serverBlock&lt;/code&gt; is nothing to do with the actual authentication process. It instead does the following two things to facilitate using NGINX as a demo for the auth functionality:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Modifies the logging so that the &lt;code&gt;x-auth-request-access-token&lt;/code&gt; header will be include in log output, this allows us to watch the logs and extract the tokens for analysis and testing&lt;/li&gt;
&lt;li&gt;It automatically appends the &lt;code&gt;x-auth-request-access-token&lt;/code&gt; header from the incoming request to the final user response, so that we can inspect it in the browser&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note that especially outputting access tokens to logs is a security risk and should never be done in production.&lt;/p&gt;

&lt;p&gt;The lines associated with the authentication are the following:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;ingress&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;annotations&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;nginx.ingress.kubernetes.io/auth-url&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;https://oauth.ssotest.staging.talkingquickly.co.uk/oauth2/auth&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;nginx.ingress.kubernetes.io/auth-signin&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;https://oauth.ssotest.staging.talkingquickly.co.uk/oauth2/start?rd=$scheme://$best_http_host$request_uri&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;nginx.ingress.kubernetes.io/auth-response-headers&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;x-auth-request-user,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;x-auth-request-email,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;x-auth-request-access-token&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;acme.cert-manager.io/http01-edit-in-place&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;true&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;nginx.ingress.kubernetes.io/proxy-buffer-size&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;16k&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We include &lt;code&gt;acme.cert-manager.io/http01-edit-in-place: &amp;quot;true&amp;quot;&lt;/code&gt; to workaround an issue with Cert Manager and setting auth response headers. We use &lt;code&gt;nginx.ingress.kubernetes.io/proxy-buffer-size: &amp;quot;16k&amp;quot;&lt;/code&gt; to avoid the same buffer size issue with OAuth headers which we described when installing OAuth 2 Proxy.&lt;/p&gt;

&lt;p&gt;The first core line is &lt;code&gt;nginx.ingress.kubernetes.io/auth-url&lt;/code&gt; which specifies the URL which should be used for checking if the current user is authenticated.&lt;/p&gt;

&lt;p&gt;When a request comes in, NGINX auth will first send the request onto this URL, note that it will not send the request body, only the headers, most importantly, any cookies which are associated with the request.&lt;/p&gt;

&lt;p&gt;The service at this URL (in our case OAuth2 Proxy) is responsible for validating, based on any cookies or headers present, whether the user is authenticated.&lt;/p&gt;

&lt;p&gt;If the user is authenticated, then the service returns a 2xx status code, and the request is passed onto our application. If it is not authenticated, then it is passed to the URL specified in &lt;code&gt;nginx.ingress.kubernetes.io/auth-signin&lt;/code&gt; to kick off the authentication flow.&lt;/p&gt;

&lt;p&gt;This is why we had to set the cookie domain of OAuth2 Proxy to explicitly be the base domain, so that the cookie is available on all of the subdomains that we wish to authenticate from.&lt;/p&gt;

&lt;p&gt;Because of the &lt;code&gt;set_authorization_header = true&lt;/code&gt; in our configuration, When a request is authenticated, OAuth2 Proxy will set the &lt;code&gt;x-auth-request-access-token&lt;/code&gt; header on the 2xx response it sends back to NGINX to contain the auth token, in this case a JWT containing information about the user and their session.&lt;/p&gt;

&lt;p&gt;By default, there&amp;#39;s no way for our original application to access this token and if we want our application to know which user is logging in or which groups they are a member of, it will need this information. &lt;/p&gt;

&lt;p&gt;To rectify this, the annotation &lt;code&gt;nginx.ingress.kubernetes.io/auth-response-headers: &amp;quot;x-auth-request-user, x-auth-request-email, x-auth-request-access-token&amp;quot;&lt;/code&gt; instructs the NGINX Ingress to take the listed headers from the returned 2xx response and append them to the response which goes to the backend application.&lt;/p&gt;

&lt;p&gt;Our backend application can then take this header and decode the JWT to gain information about the user.&lt;/p&gt;

&lt;p&gt;In the case of this simple example we simply output it to the logs (insecurely) and append it to the response sent to the user. So if we now go to our Ingress URL for our nginx demo app, in the example case this was https://nginx-demo-app2.ssotest.staging.talkingquickly.co.uk we&amp;#39;ll be asked to login and then redirected to the &amp;quot;Welcome to nginx!&amp;quot; page. &lt;/p&gt;

&lt;p&gt;We can then inspect the request using the network tab in our browser and we&amp;#39;ll see that the &lt;code&gt;x-auth-request-access-token&lt;/code&gt; is set on the response.&lt;/p&gt;

&lt;p&gt;If we copy the value of this header into a decoder such as the one at &lt;a href=&quot;https://jwt.io/&quot;&gt;https://jwt.io/&lt;/a&gt; we&amp;#39;ll see something like:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;quot;scope&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;openid email profile&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;quot;email_verified&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Ben Dixon&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;quot;groups&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&amp;quot;/DockerRegistry&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&amp;quot;/KubernetesAdmins&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&amp;quot;/Administrators&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;quot;preferred_username&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;talkingquickly&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;quot;given_name&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Ben&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;quot;family_name&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Dixon&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;quot;email&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;ben@talkingquickly.co.uk&amp;quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Which in a more complex system, could then be used by our backend application to show different content depending on group membership or surface profile information to the user.&lt;/p&gt;

&lt;h2&gt;Token expiry&lt;/h2&gt;

&lt;p&gt;We effectively have two levels of authentication going on. When a request is first authenticated, OAuth2 Proxy communicates with Keycloak and gets an access token. Going forward when requests come in, as long as the OAuth2 Proxy cookie is present and valid, then the request will not be re-authenticated with Keycloak.&lt;/p&gt;

&lt;p&gt;When working with JSON Web Tokens, this presents a problem because they will typically be issued with an expiry (by default in Keycloak this is 1 minute). This leads to a situation where the user is considered authenticated by OAuth2 Proxy but the JSON web token which is being passed in the &lt;code&gt;x-auth-request-access-token&lt;/code&gt; header is expired. So if we were to then validate this token with our library of choice, we&amp;#39;d receive an exception that the token is invalid.&lt;/p&gt;

&lt;p&gt;The solution of this lies in the following part of the OAuth 2 Proxy configuration file:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;cookie_refresh = &amp;quot;1m&amp;quot;
cookie_expire = &amp;quot;30m&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The first part &lt;code&gt;cookie_refresh&lt;/code&gt;, instructs OAuth2 Proxy to refresh the access token if the OAuth2 Proxy cookie hasn&amp;#39;t been refreshed for a minute or more. This is aligned with the token expiry set in Keycloak and prevents us from adding stale access tokens to requests. Note that the reason for using the generic OIDC provider in OAuth2 Proxy rather than the specific &amp;quot;Keycloak&amp;quot; one is that the &amp;quot;Keycloak&amp;quot; provider does not (at time of writing) support refresh tokens).&lt;/p&gt;

&lt;p&gt;The second part &lt;code&gt;cookie_expire&lt;/code&gt; instructs OAuth 2 Proxy to expire the cookie if it&amp;#39;s more than 30 minutes old. The user will then be passed back to KeyCloak to re-authenticate. This is again aligned with the default session expiry in Keycloak.&lt;/p&gt;

&lt;h2&gt;Limiting access to certain groups&lt;/h2&gt;

&lt;p&gt;It is possible to crudely limit login to users in particular groups by adding:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;allowed_groups = [&amp;quot;/DemoAdmin&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To the &lt;code&gt;configFile&lt;/code&gt; block in OAuth2 Proxies configuration. This would have the effect of only allowing access if the logged in user was in the &lt;code&gt;DemoAdmin&lt;/code&gt; Keycloak group. It&amp;#39;s worth noting that at time of writing the user experience of this approach is quite poor because the user trying to login will simply see a 500 Internal Server error rather than an informative error message. If we look at the NGinx Ingress logs we&amp;#39;ll see something like &lt;code&gt;auth request unexpected status: 400 while sending to client&lt;/code&gt; which is because OAuth2 Proxy returns a 400 response when the user logs in but is not found to be in one of the allowed groups. &lt;/p&gt;

&lt;p&gt;So while this approach is suitable for simple internal applications, handling group membership within the authenticated application will allow for a more user friendly experience.&lt;/p&gt;

&lt;h2&gt;Working with the token&lt;/h2&gt;

&lt;p&gt;The file &lt;code&gt;jwt-ruby-example/main.rb&lt;/code&gt; contains a simple example of how we could work with this token in a Ruby application. The code itself is very simple:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;jwt&amp;#39;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;public_key_string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;PUBLIC_KEY_GOES_HERE&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;public_key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;OpenSSL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;PKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;RSA&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;public_key_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;token&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;TOKEN_GOES_HERE&amp;quot;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;decoded_token&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;JWT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;decode&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;public_key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;algorithm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;RS256&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;decoded_token&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here we replace &lt;code&gt;PUBLIC_KEY_GOES_HERE&lt;/code&gt; with the public key which can be found by going to &amp;quot;Realm Settings&amp;quot; and then &amp;quot;Keys&amp;quot; in our Keycloak realm and then choosing &amp;quot;Public Key&amp;quot; for the &lt;code&gt;RS256&lt;/code&gt; entry. &lt;/p&gt;

&lt;p&gt;We then replace &lt;code&gt;TOKEN_GOES_HERE&lt;/code&gt; with a token that we&amp;#39;ve copied from our example apps logs or headers and execute the script with &lt;code&gt;ruby main.rb&lt;/code&gt; (after having run &lt;code&gt;bundle install&lt;/code&gt; etc).&lt;/p&gt;

&lt;p&gt;Note that by default the tokens issued by Keycloak have a 1 minute expiry, so you have to be quick copying and pasting them into this script.&lt;/p&gt;

&lt;p&gt;The output will be the decoded token as a ruby map. So in a full web application (e.g. a Rails or Sinatra app), we could make decisions based on the groups the user is a member of or display to the user their currently logged in email address.&lt;/p&gt;

&lt;p&gt;{% include kubernetes-sso/contents.html active=&amp;quot;webapps&amp;quot; %}&lt;/p&gt;
</content>
<summary>In this post we&amp;#39;ll setup a generic solution which allows us to add authentication via Keycloak to any application, simply by adding an ingress annotation. This gives us a much more extendable and secure alternative to basic auth.</summary>
</entry>
<entry>
<title>Comprehensive docker registry on Kubernetes with Harbor and Keycloak for single sign on</title>
<link href="https://www.talkingquickly.co.uk/harbor-docker-registry-on-kubernetes-authentication-with-keycloak" rel="alternate" type="text/html" title="Comprehensive docker registry on Kubernetes with Harbor and Keycloak for single sign on" />
<published>2021-02-19T15:40:00+00:00</published>
<updated>2021-02-19T15:40:00+00:00</updated>
<id>https://www.talkingquickly.co.uk/harbour-docker-registry-oidc-keycloak</id>
<content type="html" xml:base="https://www.talkingquickly.co.uk/harbor-docker-registry-on-kubernetes-authentication-with-keycloak">&lt;p&gt;In this post we&amp;#39;ll install a feature rich but lightweight docker registry and integrate login and authorization with Keycloak users and groups. &lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://goharbor.io&quot;&gt;Harbor&lt;/a&gt; is an open source registry which can serve multiple types of cloud artifacts and secure them using fine grained access control. In this case we&amp;#39;ll be focussed on using harbor as a docker image registry and linking it&amp;#39;s authentication with Keycloak but it is also capable of serving multiple other types of artifact, including helm charts.&lt;/p&gt;

&lt;p&gt;This post is part of a series on single sign on for Kubernetes.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;{% include kubernetes-sso/contents.html active=&amp;quot;harborregistry&amp;quot; %}&lt;/p&gt;

&lt;p&gt;{% include kubernetes-sso/pre-reqs.html %}&lt;/p&gt;

&lt;p&gt;This post assumes you&amp;#39;ve already completed the &amp;quot;Installing Keycloak&amp;quot; section.&lt;/p&gt;

&lt;h2&gt;Installing harbor&lt;/h2&gt;

&lt;p&gt;The official helm chart for installing harbor can be found here: &lt;a href=&quot;https://github.com/goharbor/harbor-helm&quot;&gt;https://github.com/goharbor/harbor-helm&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As with most helm charts, we learn a lot by inspecting the &lt;a href=&quot;https://github.com/goharbor/harbor-helm/blob/master/values.yaml&quot;&gt;values file which can be found here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In this tutorial we&amp;#39;re going to customise the sections which define ingress and TLS certificate generation. OIDC configuration has to be done post installation and can either be done using the HTTP API or the web UI.&lt;/p&gt;

&lt;p&gt;Our initial values file will look something like this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;expose&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;ingress&lt;/span&gt;
  &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;tls&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;certSource&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;secret&lt;/span&gt;
    &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;secret&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;secretName&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;harbor-ingress-tls&lt;/span&gt;
  &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;ingress&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;annotations&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;cert-manager.io/cluster-issuer&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;letsencrypt-production&lt;/span&gt;

    &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;hosts&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;core&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;core.harbor.ssotest.staging.talkingquickly.co.uk&lt;/span&gt;

&lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;harborAdminPassword&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;85nsafg87ehfgk0fgsgfg6u&lt;/span&gt;
&lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;externalURL&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;https://core.harbor.ssotest.staging.talkingquickly.co.uk&lt;/span&gt;
&lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;secretKey&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;8d10dlskeit8fhtg&amp;quot;&lt;/span&gt;

&lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;notary&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;enabled&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;false&lt;/span&gt;

&lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;metrics&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;enabled&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Important things to note here:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;certSource: secret&lt;/code&gt; combined with &lt;code&gt;secretName: harbor-ingress-tls&lt;/code&gt; mean that harbor will use the certificate generated for the ingress (by cert manager) rather than generating it&amp;#39;s own certificates. This avoids errors such as &lt;code&gt;x509: certificate signed by unknown authority&lt;/code&gt; when running &lt;code&gt;docker login&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;core:&lt;/code&gt; ingress url should be replaced with the URL you wish Harbour to run on, which should have appropriate DNS records to point it to your NGINX ingress&lt;/li&gt;
&lt;li&gt;&lt;code&gt;harbourAdminPassword&lt;/code&gt;, &lt;code&gt;externalURL&lt;/code&gt; and &lt;code&gt;secretKey&lt;/code&gt; should all be customised with your own values, &lt;code&gt;secretKey&lt;/code&gt; should be a random 16 character value&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We can then add the helm repository and install harbor with:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;helm repo add harbor https://helm.goharbor.io
helm upgrade --install harbor-registry harbor/harbor --values=./harbor/values-harbor.yml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Once this command completes, we&amp;#39;ll be able to access the Harbor UI using the ingress URL we selected for &lt;code&gt;core&lt;/code&gt; with the username &lt;code&gt;admin&lt;/code&gt; and the password we specified in &lt;code&gt;harborAdminPassword&lt;/code&gt;. It takes a while for the various components to start and it&amp;#39;s not unusual to see a few pods in &lt;code&gt;CrashLoopBackoff&lt;/code&gt; temporarily while this is happening.&lt;/p&gt;

&lt;p&gt;Note that we cannot &lt;code&gt;docker login&lt;/code&gt; with our Harbor admin user and we don&amp;#39;t currently have any regular harbor users. We should not create any regular users because we can only switch to OIDC based login if no users other than &lt;code&gt;admin&lt;/code&gt; have been created.&lt;/p&gt;

&lt;p&gt;If we create a test user now and then subsequently delete it, we still won&amp;#39;t be able to switch to OIDC based login. Instead we&amp;#39;ll configure Keycloak login.&lt;/p&gt;

&lt;h2&gt;Creating a client in Keycloak&lt;/h2&gt;

&lt;p&gt;In the KeyCloak clients UI create a new client with Client ID &lt;code&gt;harbor&lt;/code&gt; and Client Protocol &amp;quot;openid-connect&amp;quot; with the following configuration:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Access Type&lt;/strong&gt;: &lt;code&gt;confidential&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Valid Redirect URIs&lt;/strong&gt;: &lt;code&gt;https://YOUR_HARBOR_CORE_INGRESS_DOMAIN/c/oidc/callback&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Then save the client and make a note of the &amp;quot;Client Secret&amp;quot; in the newly available credentials tab.&lt;/p&gt;

&lt;p&gt;Finally head to the &amp;quot;Mappers&amp;quot; tab for the client and create the following Protocol Mapper:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Name&lt;/strong&gt;: Groups&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Mapper Type&lt;/strong&gt;: Group Membership&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Token Claim Name&lt;/strong&gt;: &lt;code&gt;groups&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;All Other Options&lt;/strong&gt;: On&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Configuring Harbor OIDC via the admin UI&lt;/h2&gt;

&lt;p&gt;Login to the Harbour web UI available at the ingress URL you selected using the username &lt;code&gt;admin&lt;/code&gt; and the password you specified in &lt;code&gt;harborAdminPassword&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Head to &lt;code&gt;Administration&lt;/code&gt; and then &lt;code&gt;Configuration&lt;/code&gt; and choose the &lt;code&gt;Authentication&lt;/code&gt; tab. Change the &lt;code&gt;Auth Mode&lt;/code&gt; to &lt;code&gt;OIDC&lt;/code&gt; and then enter the following configuration:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;OIDC Provider Name&lt;/strong&gt;: Keycloak&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;OIDC Endpoint&lt;/strong&gt;: &lt;code&gt;https://YOUR_KEYCLOAK_BASE_URL/auth/realms/YOURREALM&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;OIDC Client ID&lt;/strong&gt;: &lt;code&gt;harbor&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;OIDC Client Secret&lt;/strong&gt;: The secret from keycloak clients credentials tab&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Group Claim Name&lt;/strong&gt;: &lt;code&gt;groups&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;OIDC Scope&lt;/strong&gt;: &lt;code&gt;openid,profile,email,offline_access&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Verify Certificate&lt;/strong&gt;: checked if you&amp;#39;re using a valid SSL cert&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Automatic Onboarding&lt;/strong&gt;: checked&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Username Claim&lt;/strong&gt;: &lt;code&gt;preferred_username&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We can then use the &amp;quot;Test OIDC Server&amp;quot; button to make sure everything is working and once it is, choose &amp;quot;Save&amp;quot;.&lt;/p&gt;

&lt;h2&gt;Testing that it works&lt;/h2&gt;

&lt;p&gt;If we now logout from our admin user (or use a private browsing tab), and return to our Harbor core ingress URL, we now have the option to &amp;quot;Login with OIDC Provider&amp;quot;. If we select this we&amp;#39;ll be redirected to Keycloak to login. Here we should login with a regular Keycloak user from the realm we&amp;#39;re using (by default master), &lt;strong&gt;NOT&lt;/strong&gt; our keycloak admin user.&lt;/p&gt;

&lt;p&gt;We&amp;#39;ll then be logged into Harbor and an account automatically created for us based on our Keycloak preferred username.&lt;/p&gt;

&lt;p&gt;If we now log back in as our admin user and go to &amp;quot;Administration&amp;quot; and &amp;quot;Groups&amp;quot; we&amp;#39;ll see that any Keycloak groups the user was a member of have now been replicated into Harbor. This means we can link certain groups to certain projects to automatically give users access to the correct projects.&lt;/p&gt;

&lt;p&gt;Note that by default, all users can create projects. Since all Keycloak users can login to Harbor by default, it may be preferred to limit project creation to admins which can be done by choosing Administration/ Configuration/ System Settings and setting &amp;quot;Project Creation&amp;quot; to Admin Only.&lt;/p&gt;

&lt;p&gt;As an example we can then as an admin user, create a private project called &amp;quot;test1&amp;quot;, then head to the &amp;quot;Members&amp;quot; tab of this project and choose &amp;quot;+ Group&amp;quot;. We can then enter &lt;code&gt;/Administrators&lt;/code&gt; as the Group Name and choose &amp;quot;Project Admin&amp;quot; as the role. Any users in the &lt;code&gt;Administrators&lt;/code&gt; Keycloak group will then automatically be given the &lt;code&gt;Project Admin&lt;/code&gt; role for this project.&lt;/p&gt;

&lt;h2&gt;Use with Docker&lt;/h2&gt;

&lt;p&gt;Assuming we have created the &lt;code&gt;test1&lt;/code&gt; private project above and given our Keycloak master realm user access to it, we can login to the docker registry from our local CLI with the following command:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;docker login YOUR_HARBOR_CORE_INGRESS_URL
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So in my example case this would be:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;docker login core.harbor.ssotest.staging.talkingquickly.co.uk
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We can then use our keycloak master realm user username. For a password, we should not use our Keycloak password (this won&amp;#39;t work) we should instead obtain our CLI Secret from Harbor by clicking on our username in the top right hand corner, choosing &amp;quot;User Profile&amp;quot; and copying the CLI secret.&lt;/p&gt;

&lt;p&gt;We can then tag an image to be pushed to this repository with:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;docker tag SOURCE_IMAGE[:TAG] core.harbor.ssotest.staging.talkingquickly.co.uk/test1/REPOSITORY[:TAG]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and push it with:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;docker push core.harbor.ssotest.staging.talkingquickly.co.uk/test1/REPOSITORY[:TAG]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When we need to give things like CI servers or Kubernetes access to the repository, we can head to the &amp;quot;Robot Accounts&amp;quot; tab in Harbor to generate limited access tokens for exactly this.&lt;/p&gt;

&lt;h2&gt;Configuring Harbor OIDC from the command line&lt;/h2&gt;

&lt;p&gt;In any sort of automated environment (e.g. Ansible, Chef etc) it&amp;#39;s desirable to be able to configure everything without touching the UI. For this Harbor offers a comprehensive API. To view the API documentation login as the admin user and click on the &amp;quot;Habor API V2.0&amp;quot; option at the bottom which will take you to the swagger documentation.&lt;/p&gt;

&lt;p&gt;By default the API will be available on &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;YOUR_INGRESS_URL/api/v2.0/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So for example to view the current configuration we can use:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;curl -u &amp;quot;admin:HARBOR_ADMIN_PASSWORD&amp;quot; -H &amp;quot;Content-Type: application/json&amp;quot; -ki YOUR_INGRESS_URL/api/v2.0/configurations
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note that at time of writing, the docs at &lt;a href=&quot;https://goharbor.io/docs/1.10/install-config/configure-user-settings-cli/&quot;&gt;https://goharbor.io/docs/1.10/install-config/configure-user-settings-cli/&lt;/a&gt; were slightly behind the current version and while this is the case, getting the existing configuration object provides a better overview of the configuration options available.&lt;/p&gt;

&lt;p&gt;So to set up OIDC auth via CLI we can use:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;curl -X PUT -u &amp;quot;admin:YOUR_ADMIN_PASSWORD&amp;quot; -H &amp;quot;Content-Type: application/json&amp;quot; -ki YOUR_HARBOR_CORE_INGRESS_URL/api/v2.0/configurations -d&amp;#39;{&amp;quot;auth_mode&amp;quot;:&amp;quot;oidc_auth&amp;quot;, &amp;quot;oidc_name&amp;quot;:&amp;quot;Keycloak Auth&amp;quot;, &amp;quot;oidc_endpoint&amp;quot;:&amp;quot;YOUR_KEYCLOAK_REALM_INGRESS&amp;quot;, &amp;quot;oidc_client_id&amp;quot;:&amp;quot;harbor&amp;quot;, &amp;quot;oidc_client_secret&amp;quot;:&amp;quot;YOUR_KEYCLOAK_CLIENT_SECRET&amp;quot;, &amp;quot;oidc_scope&amp;quot;:&amp;quot;openid,profile,email,offline_access&amp;quot;, &amp;quot;oidc_groups_claim&amp;quot;:&amp;quot;groups&amp;quot;, &amp;quot;oidc_auto_onboard&amp;quot;:&amp;quot;true&amp;quot;, &amp;quot;oidc_user_claim&amp;quot;:&amp;quot;preferred_username&amp;quot;}&amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A 200 response indicates that we have Succesfully setup Keycloak auth.&lt;/p&gt;

&lt;p&gt;We could then restrict project creation to admins only with:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;curl -X PUT -u &amp;quot;admin:YOUR_ADMIN_PASSWORD&amp;quot; -H &amp;quot;Content-Type: application/json&amp;quot; -ki YOUR_HARBOR_CORE_INGRESS_URL/api/v2.0/configurations -d &amp;#39;{&amp;quot;project_creation_restriction&amp;quot;:&amp;quot;adminonly&amp;quot;}&amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The Habor API is comprehensive e.g. we can also create projects and give groups permission to access these projects entirely via the API so it&amp;#39;s well worth spending time with the Swagger documentation.&lt;/p&gt;

&lt;h2&gt;Use with Kubernetes&lt;/h2&gt;

&lt;p&gt;In order to access images in the registry we&amp;#39;ll need to create appropriate image pull secrets as described &lt;a href=&quot;https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/&quot;&gt;here in the kubernetes documentation&lt;/a&gt; for this we should use project &amp;quot;Robot Tokens&amp;quot;. &lt;/p&gt;

&lt;h2&gt;Summary&lt;/h2&gt;

&lt;p&gt;We now have a self hosted registry for docker images which is fully integrated with Keycloak for authentication. We can also configure this via the command line if we want to automate setup with a configuration management tool such as Chef or Ansible.&lt;/p&gt;

&lt;p&gt;{% include kubernetes-sso/contents.html active=&amp;quot;harborregistry&amp;quot; %}&lt;/p&gt;
</content>
<summary>In this post we&amp;#39;ll install a feature rich but lightweight docker registry and integrate login and authorization with Keycloak users and groups. Harbor is an open source registry which can serve multiple types of cloud artifacts and secure them using fine grained access control. In this case we&amp;#39;ll be focussed on using harbor as a docker image registry and linking it&amp;#39;s authentication with Keycloak but it is also capable of serving multiple other types of artifact, including helm charts.This post is part of a series on single sign on for Kubernetes.</summary>
</entry>
</feed>
